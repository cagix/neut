import {
  Dict {dictionary},
  core.control {grow},
  core.environment {get-argv},
  core.int.ord,
  core.int.parse {parse-int},
  core.random {random-int},
  core.text.io {print-int},
}

inline intdict: Dict.trope(int) {
  Dict.from-ord(core.int.ord.as-ord-N)
}

define make-big-dict(size: int): dictionary(int, int) {
  grow(Dict.empty, size, function (acc, _) {
    let key = random-int(1000000) in
    let val = random-int(1000000) in
    intdict::insert(acc, key, val)
  })
}

define random-lookup-sum(count: int, d: &dictionary(int, int)): unit {
  let rsum =
    grow(0, count, function (acc, _) {
      let key = random-int(1000000) in
      let val on key =
        match intdict::lookup(d, key) {
        | Left(_) =>
          0
        | Right(v) =>
          *v
        }
      in
      let _ = key in
      add-int(acc, val)
    })
  in
  print-int(rsum)
}

define main(): unit {
  let args = get-argv() in
  match args {
  | [_, size-str] =>
    let _ on size-str =
      match parse-int(size-str) {
      | Right(size) =>
        let big-dict = make-big-dict(size) in
        let _ on big-dict = random-lookup-sum(size, big-dict) in
        let _ = big-dict in
        Unit
      | Left(_) =>
        printf("couldn't parse `{}` as an integer\n", [*size-str])
      }
    in
    let _ = size-str in
    Unit
  | _ =>
    print("usage: dict-nt SIZE\n")
  }
}
