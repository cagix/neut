import {
  IntMap {insert, intmap},
  core.control {grow},
  core.int.parse {parse},
  core.intmap {lookup},
  core.random {random},
}

define make-big-dict(size: int): intmap(int) {
  grow(IntMap.empty(), size, function (acc, _) {
    let key = random(1000000) in
    let val = random(1000000) in
    insert(key, val, acc)
  })
}

define random-lookup-sum(count: int, d: &intmap(int)): unit {
  let rsum =
    grow(0, count, function (acc, _) {
      let key = random(1000000) in
      let val on key =
        match lookup(*key, d) {
        | Left(_) =>
          0
        | Right(v) =>
          *v
        }
      in
      let _ = key in
      add-int(acc, val)
    })
  in
  print-int(rsum)
}

define main(): unit {
  let args = get-argv() in
  match args {
  | [_, size-str] =>
    let _ on size-str =
      match parse(size-str) {
      | Right(size) =>
        let big-dict = make-big-dict(size) in
        let _ on big-dict = random-lookup-sum(size, big-dict) in
        let _ = big-dict in
        Unit
      | Left(_) =>
        printf("couldn't parse `{}` as an integer\n", [*size-str])
      }
    in
    let _ = size-str in
    Unit
  | _ =>
    print("usage: intmap-nt SIZE\n")
  }
}
