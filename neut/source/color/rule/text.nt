import {
  ansi.color {Blue, Red},
  ansi.style {Bold, Italic, Normal},
  text-builder.move.append {append-text},
  text-builder.move.extract {extract},
  text-builder.move.make-builder {make-builder},
  this.color.rule.tone {Background, Foreground, Style, _append-tone, _append-tones, tone},
}

data color-text {
| Empty
| Join(list(tone), text, color-text)
}

define packed(ts: list(tone), t: text): color-text {
  Join(ts, t, Empty)
}

define packed'(t: text): color-text {
  Join([], t, Empty)
}

define _unpacked(t: &color-text): text {
  let b = make-builder(64) in
  pin reset = Style(Normal) in
  let _ on b =
    let f =
      define loop(t: &color-text): unit {
        case t {
        | Empty =>
          Unit
        | Join(ts, t, rest) =>
          _append-tones(b, ts);
          append-text(b, t);
          _append-tone(b, reset);
          loop(rest)
        }
      }
    in
    f(t)
  in
  extract(b)
}

define _unpacked-uncolored(t: &color-text): text {
  let b = make-builder(256) in
  let _ on b =
    let f =
      define loop(t: &color-text): unit {
        case t {
        | Empty =>
          Unit
        | Join(_, t, rest) =>
          append-text(b, t);
          loop(rest)
        }
      }
    in
    f(t)
  in
  extract(b)
}

define zen(): unit {
  pin t =
    Join(
      [Foreground(Blue), Style(Bold)],
      *"hello",
      Join([], *"\n", Empty),
    )
  in
  pin fragment1 = _unpacked(t) in
  pin fragment2 = _unpacked-uncolored(t) in
  pin t' = packed([Background(Red), Style(Italic)], *"sample\n") in
  pin fragment3 = _unpacked(t') in
  print(fragment1);
  print(fragment2);
  print(fragment3);
  print("sample\n")
}
