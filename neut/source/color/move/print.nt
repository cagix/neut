import {
  ansi.color {Blue},
  ansi.style {Bold},
  core.file.descriptor {descriptor, stderr, stdout},
  core.text {_get-content-pointer, text-byte-length},
  this.color.move.make-color-kit {make-color-kit},
  this.color.rule.color-kit {_Color-Kit, color-kit},
  this.color.rule.text {_unpacked, _unpacked-uncolored, color-text, packed},
  this.color.rule.tone {Foreground, Style},
}

foreign {
  dprintf(int, pointer): void,
}

define _print(d: descriptor, t: &text): unit {
  let fmt = _get-content-pointer("%.*s\0") in
  let len = text-byte-length(t) in
  let val = _get-content-pointer(t) in
  let _ = magic external dprintf(magic cast(descriptor, int, d), fmt)(len: int, val: pointer) in
  Unit
}

define print-stdout(k: &color-kit, t: &color-text): unit {
  tie _Color-Kit of {colorize-stdout} = k in
  pin t' =
    if *colorize-stdout {
      _unpacked(t)
    } else {
      _unpacked-uncolored(t)
    }
  in
  _print(stdout, t')
}

define print-stderr(k: &color-kit, t: &color-text): unit {
  tie _Color-Kit of {colorize-stderr} = k in
  pin t' =
    if *colorize-stderr {
      _unpacked(t)
    } else {
      _unpacked-uncolored(t)
    }
  in
  _print(stderr, t')
}

define zen(): unit {
  pin t' = packed([Foreground(Blue), Style(Bold)], *"sample\n") in
  pin h = make-color-kit(False, True) in
  print-stdout(h, t');
  print-stderr(h, t')
}
