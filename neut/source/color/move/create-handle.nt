import {
  core.bool.show {show-bool},
  core.file.descriptor {descriptor, stderr, stdin, stdout},
  this.color.rule.handle {_Handle, handle},
}

foreign {
  isatty(int): int,
}

define _is-tty(d: descriptor): bool {
  eq-int(1, magic external isatty(magic cast(descriptor, int, d)))
}

define create-handle(should-colorize-stdout: bool, should-colorize-stderr: bool): handle {
  let colorize-stdout = and(should-colorize-stdout, _is-tty(stdout)) in
  let colorize-stderr = and(should-colorize-stderr, _is-tty(stderr)) in
  _Handle of {colorize-stdout, colorize-stderr}
}

define zen(): unit {
  let stdin-tty = _is-tty(stdin) in
  let stdout-tty = _is-tty(stdout) in
  let stderr-tty = _is-tty(stderr) in
  printf("({}, {}, {})\n", [show-bool(stdin-tty), show-bool(stdout-tty), show-bool(stderr-tty)])
}
