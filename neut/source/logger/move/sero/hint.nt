import {
  sero.move.decode {decode},
  sero.move.encode {encode},
  sero.move.instance.bool {bool-sero},
  sero.move.instance.int64 {int64-sero},
  sero.move.instance.text {text-sero},
  sero.rule.get-kit {get-kit},
  sero.rule.put-kit {put-kit},
  sero.rule.sero {Sero, sero},
  this.logger.rule.hint {Hint, Saved-Hint, hint, show-file-pos},
}

define _put(k: &put-kit, v: &hint): unit {
  let Sero of {put = !put-text} = text-sero in
  let Sero of {put = !put-int} = int64-sero in
  let Sero of {put = !put-bool} = bool-sero in
  case v {
  | Hint of {file-path, line, column, should-save-location} =>
    !put-text(k, *file-path);
    !put-int(k, line);
    !put-int(k, column);
    !put-bool(k, should-save-location)
  | Saved-Hint of {file-path, line, column, should-save-location} =>
    !put-text(k, file-path);
    !put-int(k, line);
    !put-int(k, column);
    !put-bool(k, should-save-location)
  }
}

define _get(k: &get-kit): ?meta hint {
  let Sero of {get = !get-text} = text-sero in
  let Sero of {get = !get-int} = int64-sero in
  let Sero of {get = !get-bool} = bool-sero in
  try file-path = !get-text(k) in
  try line = !get-int(k) in
  try column = !get-int(k) in
  try should-save-location = !get-bool(k) in
  Right(box {
    letbox file-path = file-path in
    letbox line = line in
    letbox column = column in
    letbox should-save-location = should-save-location in
    Saved-Hint of {file-path, line, column, should-save-location}
  })
}

inline hint-sero: sero(hint) {
  Sero of {
    put = _put,
    get = _get,
  }
}

define zen(): unit {
  pin val =
    Hint of {
      file-path = "/path/to/file.txt",
      line = 123,
      column = 42,
      should-save-location = True,
    }
  in
  match decode(hint-sero, encode(hint-sero, val, 8)) {
  | Left(_) =>
    print("error\n")
  | Right(h) =>
    pin h = h in
    printf("{}\n", [show-file-pos(h)])
  }
}
