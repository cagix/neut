import {
  sero.move.decode {decode},
  sero.move.encode {encode},
  sero.move.instance.either {either-sero},
  sero.move.instance.text {text-sero},
  sero.rule.get-kit {get-kit},
  sero.rule.put-kit {put-kit},
  sero.rule.sero {Sero, sero},
  this.logger.move.sero.hint {hint-sero},
  this.logger.move.sero.log-level {log-level-sero},
  this.logger.rule.log {Log, log},
  this.logger.rule.log-level {Note},
}

inline _unit-sero: sero(unit) {
  Sero of {
    put = {
      function (_, _) {
        Unit
      }
    },
    get = {
      function (_) {
        Right(quote {Unit})
      }
    },
  }
}

define _put(k: &put-kit, v: &log): unit {
  let Sero of {put = !put-option-hint} = either-sero(_unit-sero, hint-sero) in
  let Sero of {put = !put-log-level} = log-level-sero in
  let Sero of {put = !put-text} = text-sero in
  tie Log of {position, level, content} = v in
  !put-option-hint(k, position);
  !put-log-level(k, level);
  !put-text(k, content)
}

define _get(k: &get-kit): ?meta log {
  let Sero of {get = !get-option-hint} = either-sero(_unit-sero, hint-sero) in
  let Sero of {get = !get-log-level} = log-level-sero in
  let Sero of {get = !get-text} = text-sero in
  try position = !get-option-hint(k) in
  try level = !get-log-level(k) in
  try content = !get-text(k) in
  Right(box {
    letbox position = position in
    letbox level = level in
    letbox content = content in
    Log of {position, level, content}
  })
}

inline log-sero: sero(log) {
  Sero of {
    put = _put,
    get = _get,
  }
}

define zen(): unit {
  pin val = Log of {position = none, level = Note, content = *"some text"} in
  let foo = decode(log-sero, encode(log-sero, val, 8)) in
  match foo {
  | Left(_) =>
    print("error\n")
  | Right(l) =>
    print("right\n");
    let Log of {content} = l in
    printf("{}\n", [content])
  }
}
