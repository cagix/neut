import {
  core.c-size {C-Size},
  core.external {free, malloc},
  core.memory {load-int, store-int},
}

resource noisy-boxed-int {
  function (v: pointer) {
    print("discarded.\n");
    free(v)
  },
  function (v: pointer) {
    print("copied.\n");
    let orig-value = load-int(v);
    let new-ptr = malloc(C-Size(1));
    magic store(int, orig-value, new-ptr);
    new-ptr
  },
}

// provide a way to introduce new boxed integer
define create-new-noisy-boxed-int(x: int): noisy-boxed-int {
  let new-ptr = malloc(C-Size(1));
  store-int(x, new-ptr);
  magic cast(pointer, noisy-boxed-int, new-ptr)
}

define main(): unit {
  let !i = create-new-noisy-boxed-int(10);
  let _ = !i;
  let _ = !i;
  let _ = !i;
  Unit
}
