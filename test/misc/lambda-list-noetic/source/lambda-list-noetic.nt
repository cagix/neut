import {
  core.int.io {print-int-line},
}

data nat {
| Zero
| Succ(nat)
}

define interpret(n: nat): int {
  match n {
  | Zero =>
    0
  | Succ(m) =>
    add-int(1, interpret(m))
  }
}

define add-nat(x: nat, y: nat): nat {
  match x {
  | Zero =>
    y
  | Succ(m) =>
    add-nat(m, Succ(y))
  }
}

define mul-nat(x: nat, !y: nat): nat {
  match x {
  | Zero =>
    Zero
  | Succ(m) =>
    add-nat(mul-nat(m, !y), !y)
  }
}

define fold(a: type, fs: &list((a) -> a), x: a): a {
  case fs {
  | Nil =>
    x
  | Cons(f, rest) =>
    let _ = rest;
    let _ = rest;
    f(fold(a, rest, x))
  }
}

define main(): unit {
  let n1 = Succ(Zero);
  let !n2 = Succ(n1);
  let !n3 = Succ(!n2);
  let add2 =
    function (x) {
      add-nat(x, !n2)
    };
  let mul3 =
    function (x) {
      mul-nat(x, !n3)
    };
  let !mul9 =
    function (x) {
      mul-nat(x, mul-nat(!n3, !n3))
    };
  let _ = !mul9;
  let fs = Cons(add2, Cons(mul3, Cons(!mul9, Nil)));
  let gs = fs;
  pin hs = gs;
  // 2 + (3 * (9 * 3)) = 83
  print-int-line(interpret(fold(_, hs, !n3)))
}
