import {
- core.top
- core.bool
- core.list => L
- core.i8-array => i8
}

variant list(a: tau) {
- Nil()
- Cons(a, list(a))
}

define-inline add-pointer(x: int, offset: int): int {
  let ptr = magic cast(int, int, x)
  magic cast(int, int, add-int(ptr, offset))
}

define copy-i8-array(content-pointer: int, new-content-pointer: int, counter: int, length: int): top {
  if eq-int(counter, length) {
    Unit
  } else {
    let value-pointer = add-pointer(content-pointer, counter)
    let value: i8 = magic load(i8, value-pointer)
    let new-value-pointer = add-pointer(new-content-pointer, counter)
    let _: int = magic store(i8, new-value-pointer, value)
    copy-i8-array(content-pointer, new-content-pointer, add-int(counter, 1), length)
  }
}

resource i8-array {
- lambda(x: int) {
    let address = magic cast(int, int, x)
    let content-pointer: int = magic load(pointer, add-int(address, 8))
    let _: int = magic external(free, content-pointer)
    magic external(free, x)
  }
- lambda(x: int) {
    let length: int = magic load(int, x)
    let content-pointer: int = magic load(pointer, add-pointer(x, 8))
    let new-content-pointer: int = magic external(malloc, length)
    let _ = copy-i8-array(content-pointer, new-content-pointer, 0, length)
    let result-pointer: int = magic external(malloc, 16: int)
    let _: int = magic store(int, result-pointer, length)
    let _: int = magic store(pointer, add-pointer(result-pointer, 8), new-content-pointer)
    result-pointer
  }
}

define main(): int {
  let base-pointer: int = magic external(malloc, 16: int)
  let content-pointer: int = magic external(malloc, 3: int)
  let _: int = magic store(i8, add-int(content-pointer, 2), 4: i8)
  let _: int = magic store(int, base-pointer, 3: int)
  let _: int = magic store(pointer, add-int(base-pointer, 8), content-pointer)
  let my-array = magic cast(int, i8-array, base-pointer)
  let _ = my-array
  let _ = my-array
  let _ = my-array
  let _ = my-array
  let _ = my-array
  let f = my-array
  let f-ptr = magic cast(i8-array, int, f)
  let f-content-pointer = magic load(pointer, add-int(f-ptr, 8))
  let value: i8 = magic load(i8, add-int(f-content-pointer, 2))
  let _ = magic cast(int, i8-array, f-ptr)
  let _ = magic cast(i8, int, value)
  0
}
