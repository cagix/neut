import {
  core.int.io {print-int-line},
  core.list {for-each},
}

data nat {
| Zero
| Succ(nat)
}

define add-nat(x: nat, y: nat): nat {
  match x {
  | Zero =>
    y
  | Succ(m) =>
    add-nat(m, Succ(y))
  }
}

define mul-nat(x: nat, !y: nat): nat {
  match x {
  | Zero =>
    Zero
  | Succ(m) =>
    add-nat(mul-nat(m, !y), !y)
  }
}

define interpret(n: nat): int {
  match n {
  | Zero =>
    0
  | Succ(m) =>
    add-int(1, interpret(m))
  }
}

define gen(!n: nat): list(nat) {
  match !n {
  | Zero =>
    Nil
  | Succ(m) =>
    Cons(!n, gen(m))
  }
}

define fold-r(a: type, b: type, !f: (b, a) -> a, acc: a, xs: list(b)): a {
  match xs {
  | Nil =>
    acc
  | Cons(y, ys) =>
    !f(y, fold-r(a, b, !f, acc, ys))
  }
}

define tails(a: type, !xs: list(a)): list(list(a)) {
  match !xs {
  | Nil =>
    Cons(Nil, Nil)
  | Cons(_, !xs) =>
    Cons(!xs, tails(a, !xs))
  }
}

define head(xs: list(nat)): nat {
  match xs {
  | Nil =>
    Zero
  | Cons(y, _) =>
    y
  }
}

define main(): unit {
  let !n = Succ(Succ(Succ(Zero)));
  let _ = !n;
  let _ = !n;
  let _ = !n;
  let !m = mul-nat(!n, mul-nat(!n, !n));
  // 27
  let _ = !m;
  let _ = !m;
  // [27, 26, 25, ..., 1]
  let xs = gen(!m);
  // [[26, ...], [25, ...], ..., [1, ...]]
  let !yss = tails(_, xs);
  let _ = !yss;
  let _ = !yss;
  let !zs =
    // [26, ..., 1]
    for-each(!yss, function (l) {
      head(l)
    });
  let _ = !zs;
  let _ = !zs;
  let _ = !zs;
  let _ = !zs;
  let _ = !zs;
  let !result-nat =
    // 26 + ... + 1 = 351
    fold-r(
      nat,
      nat,
      function (a, b) {
        add-nat(a, b)
      },
      Zero,
      !zs,
    );
  let _ = !result-nat;
  let _ = !result-nat;
  let result = interpret(!result-nat);
  print-int-line(result);
}
