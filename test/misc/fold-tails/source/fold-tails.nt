data nat {
  Zero,
  Succ(nat),
}

define add-nat(x: nat, y: nat): nat {
  match x {
    Zero => y,
    Succ(m) => add-nat(m, Succ(y)),
  }
}

define mul-nat(x: nat, y: nat): nat {
  match x {
    Zero => Zero,
    Succ(m) => add-nat(mul-nat(m, y), y),
  }
}

define interpret(n: nat): int {
  match n {
    Zero => 0,
    Succ(m) => add-int(1, interpret(m)),
  }
}

define gen(n: nat): list(nat) {
  match n {
    Zero => Nil,
    Succ(m) => Cons(n, gen(m)),
  }
}

define fold-r(a: tau, b: tau, f: (b, a) -> a, acc: a, xs: list(b)): a {
  match xs {
    Nil => acc,
    Cons(y, ys) => f(y, fold-r(a, b, f, acc, ys)),
  }
}

define tails(a: tau, xs: list(a)): list(list(a)) {
  match xs {
    Nil => Cons(Nil, Nil),
    Cons(_, xs) => Cons(xs, tails(a, xs)),
  }
}

define head(xs: list(nat)): nat {
  match xs {
    Nil => Zero,
    Cons(y, _) => y,
  }
}

define main(): unit {
  let n = Succ(Succ(Succ(Zero))) in
  let _ = n in
  let _ = n in
  let _ = n in
  let m = mul-nat(n, mul-nat(n, n)) in
  // 27
  let _ = m in
  let _ = m in
  // [27, 26, 25, ..., 1]
  let xs = gen(m) in
  // [[26, ...], [25, ...], ..., [1, ...]]
  let yss = tails(_, xs) in
  let _ = yss in
  let _ = yss in
  let zs =
    // [26, ..., 1]
    map(
      function (l) {
        head(l)
      },
      yss,
    )
  in
  let _ = zs in
  let _ = zs in
  let _ = zs in
  let _ = zs in
  let _ = zs in
  let result-nat =
    // 26 + ... + 1 = 351
    fold-r(
      nat,
      nat,
      function (a, b) {
        add-nat(a, b)
      },
      Zero,
      zs,
    )
  in
  let _ = result-nat in
  let _ = result-nat in
  let result = interpret(result-nat) in
  print-int(result);
  print("\n")
}
