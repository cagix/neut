variant nat {
- Zero
- Succ(nat)
}

define add-nat(x: nat, y: nat): nat {
  match x {
  - Zero =>
    y
  - Succ(m) =>
    add-nat(m, Succ(y))
  }
}

define mul-nat(x: nat, y: nat): nat {
  match x {
  - Zero =>
    Zero
  - Succ(m) =>
    add-nat(mul-nat(m, y), y)
  }
}

define interpret(n: nat): int {
  match n {
  - Zero =>
    0
  - Succ(m) =>
    add-int(1, interpret(m))
  }
}

define gen(n: nat): list(nat) {
  match n {
  - Zero =>
    Nil
  - Succ(m) =>
    Cons(n, gen(m))
  }
}

define fold-r[a, b](f: (b, a) -> a, acc: a, xs: list(b)): a {
  match xs {
  - Nil =>
    acc
  - Cons(y, ys) =>
    f(y, fold-r(f, acc, ys))
  }
}

define tails(a: tau, xs: list(a)): list(list(a)) {
  match xs {
  - Nil =>
    Cons(Nil, Nil)
  - Cons(_, xs) =>
    Cons(xs, tails(a, xs))
  }
}

define head(xs: list(nat)): nat {
  match xs {
  - Nil =>
    Zero
  - Cons(y, _) =>
    y
  }
}

define main(): unit {
  let n = Succ(Succ(Succ(Zero)))
  let _ = n
  let _ = n
  let _ = n
  let m = mul-nat(n, mul-nat(n, n)) // 27
  let _ = m
  let _ = m
  let xs = gen(m) // [27, 26, 25, ..., 1]
  let yss = tails(_, xs) // [[26, ...], [25, ...], ..., [1, ...]]
  let _ = yss
  let _ = yss
  let zs = map((l) => { head(l) }, yss) // [26, ..., 1]
  let _ = zs
  let _ = zs
  let _ = zs
  let _ = zs
  let _ = zs
  let result-nat = fold-r((a, b) => { add-nat(a, b) }, Zero, zs) // 26 + ... + 1 = 351
  let _ = result-nat
  let _ = result-nat
  let result = interpret(result-nat)
  print-int(result)
  print("\n")
}
