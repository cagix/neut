import {
- core.bool
- core.list => L
- core.vector => V
}

variant list() {
- Nil()
- Cons(int, list())
}

define my-length(xs: list()): int {
  match xs {
  - Nil() =>
    0
  - Cons(_, ys) =>
    add-int(1, my-length(ys))
  }
}

define main(): int {
  let xs = Nil()
  let no-free-var =
    define foo(c: int): int {
      if eq-int(c, 0) {
        1
      } else {
        foo(sub-int(c, 1))
      }
    }
  let _ = no-free-var(3)
  let single-free-var =
    define free-vars-in-recursion(c: int): int {
      if eq-int(c, 0) {
        let _ = xs
        let _ = my-length(xs)
        1
      } else {
        free-vars-in-recursion(sub-int(c, 1))
      }
    }
  let _ = single-free-var(3)
  let ys = xs
  let zs = xs
  let ws = Nil()
  let multiple-free-var =
    define free-vars-in-recursion(c: int): int {
      if eq-int(c, 0) {
        let _ = xs
        let _ = xs
        let _ = ys
        let _ = my-length(ys)
        let _ = my-length(zs)
        let _ = zs
        1
      } else {
        let _ = xs
        let _ = ys
        let _ = ws
        free-vars-in-recursion(sub-int(c, 1))
      }
    }
  print-int(multiple-free-var(3))
  print("\n")
  0
}
