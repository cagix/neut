import {
  core.int.show {show-int},
  core.list {length},
}

define main(): unit {
  let !xs: list(int) = [] in
  let no-free-var =
    define foo(c: int): int {
      if eq-int(c, 0) {
        1
      } else {
        foo(sub-int(c, 1))
      }
    }
  in
  let _ = no-free-var(3) in
  let single-free-var =
    define free-vars-in-recursion(c: int): int {
      if eq-int(c, 0) {
        let _ = !xs in
        let _ on !xs = length(!xs) in
        let _ = !xs in
        1
      } else {
        free-vars-in-recursion(sub-int(c, 1))
      }
    }
  in
  let _ = single-free-var(3) in
  let !ys = !xs in
  let !zs = !xs in
  let !ws: list(int) = [] in
  let multiple-free-var =
    define free-vars-in-recursion(c: int): int {
      if eq-int(c, 0) {
        let _ = !xs in
        let _ = !xs in
        let _ = !ys in
        let _ on !ys = length(!ys) in
        let _ on !zs = length(!zs) in
        let _ = !ys in
        let _ = !zs in
        1
      } else {
        let _ = !xs in
        let _ = !ys in
        let _ = !ws in
        free-vars-in-recursion(sub-int(c, 1))
      }
    }
  in
  printf("{}\n", [show-int(multiple-free-var(3))])
}
