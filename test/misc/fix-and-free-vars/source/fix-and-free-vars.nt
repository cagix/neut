import {
- core.bool
- L
- V
}

data list() {
- Nil()
- Cons(int, list())
}

define my-length(xs: list()): int {
  match xs {
  - Nil() =>
    0
  - Cons(_, ys) =>
    add-int(1, my-length(ys))
  }
}

define main(): unit {
  let xs = Nil() in
  let no-free-var =
    mu foo(c: int): int {
      if eq-int(c, 0) {
        1
      } else {
        foo(sub-int(c, 1))
      }
    }
  in
  let _ = no-free-var(3) in
  let single-free-var =
    mu free-vars-in-recursion(c: int): int {
      if eq-int(c, 0) {
        let _ = xs in
        let _ = my-length(xs) in
        1
      } else {
        free-vars-in-recursion(sub-int(c, 1))
      }
    }
  in
  let _ = single-free-var(3) in
  let ys = xs in
  let zs = xs in
  let ws = Nil() in
  let multiple-free-var =
    mu free-vars-in-recursion(c: int): int {
      if eq-int(c, 0) {
        let _ = xs in
        let _ = xs in
        let _ = ys in
        let _ = my-length(ys) in
        let _ = my-length(zs) in
        let _ = zs in
        1
      } else {
        let _ = xs in
        let _ = ys in
        let _ = ws in
        free-vars-in-recursion(sub-int(c, 1))
      }
    }
  in
  print-int(multiple-free-var(3));
  print("\n")
}
