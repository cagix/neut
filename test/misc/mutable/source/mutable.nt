import {
- core.list => L
- core.vector => V
}

variant list(a: tau) {
- Nil()
- Cons(a, list(a))
}

define my-length(xs: &list(int)): int {
  case xs {
  - Nil() =>
    0
  - Cons(_, ys) =>
    add-int(1, my-length(ys))
  }
}

define bar(xs-cell: &cell(list(int))): unit {
  borrow(xs-cell, (xs) => {
    let len = my-length(xs)
    print-int(len)
    print("\n")
  })
}

define main(): unit {
  let xs: list(int) = Cons(1, Cons(2, Nil()))
  let xs-cell = new-cell(xs)
  let _ on xs-cell = {
    let _ = bar(xs-cell)
    mutate(xs-cell, (xs) => {
      Cons(4, xs)
    })
    let _ = bar(xs-cell)
    mutate(xs-cell, (_) => {
      Nil()
    })
    mutate(xs-cell, (xs) => {
      Cons(4, xs)
    })
    bar(xs-cell)
  }
  let _ = xs-cell
  Unit
}
