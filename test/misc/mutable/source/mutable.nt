import {
- core.list => L
- core.vector => V
}

variant list(a: tau) {
- Nil()
- Cons(a, list(a))
}

define my-length(xs: &list(int)): int {
  case xs {
  - Nil() =>
    0
  - Cons(_, ys) =>
    add-int(1, my-length(ys))
  }
}

define bar(xs-cell: &cell(list(int))): int {
  borrow(xs-cell, my-length)
}

define main(): int {
  let xs: list(int) = Cons(1, Cons(2, Nil()))
  let xs-cell = new-cell(xs)
  let result on xs-cell = {
    let _ = bar(xs-cell)
    mutate(xs-cell, lambda (xs) {
      Cons(4, xs)
    })
    let _ = bar(xs-cell)
    mutate(xs-cell, lambda (_) {
      Nil()
    })
    mutate(xs-cell, lambda (xs) {
      Cons(4, xs)
    })
    bar(xs-cell)
  }
  let _ = xs-cell
  print-int(result)
  print("\n")
  0
}
