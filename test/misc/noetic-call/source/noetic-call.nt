define my-length(xs: &list(int)): int {
  let _ = xs
  let _ = xs
  let c = xs
  case c {
  - Nil =>
    0
  - Cons(_, ys) =>
    add-int(1, my-length(ys))
  }
}

define tail(xs: &list(int)): &list(int) {
  case xs {
  - Nil =>
    xs
  - Cons(_, ys) =>
    ys
  }
}

define main(): int {
  let xs = Cons(3, Cons(1, Cons(2, Nil)))
  let some-value on xs = my-length(tail(xs))
  let _ = xs
  let _ = some-value
  0
}
