import {
- core.monoid => [monoid, Monoid]
- this.arith => a
- this.compare => c
}

alias double { float64 }

inline add(x: double, y: double): double {
  add-float64(x, y)
}

inline sub(x: double, y: double): double {
  sub-float64(x, y)
}

inline mul(x: double, y: double): double {
  mul-float64(x, y)
}

inline div(x: double, y: double): double {
  div-float64(x, y)
}

inline from-int(x: int): double {
  sitofp-int-float64(x)
}

inline as-additive-monoid(): monoid(double) {
  Monoid of {
  - unit => 0.0
  - join => add
  }
}

inline compare(): c.compare(double) {
  c.Compare of {
  - lt => lt-float64
  - le => le-float64
  - gt => gt-float64
  - ge => ge-float64
  - eq => eq-float64
  }
}

inline arith(): a.arith(double) {
  a.Arith of {
  - neg => neg-float64
  - add => add-float64
  - sub => sub-float64
  - mul => mul-float64
  - div => div-float64
  - compare => compare()
  }
}
