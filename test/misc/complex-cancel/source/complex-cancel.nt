data joker {
| L(joker)
| R(int)
}

// cancel: x ~> {}
define test(x: joker): joker {
  match x {
  | L(v1) =>
    // the `free(x)` inserted here is cancelled by ((A) + (B)) * (C)
    match v1 {
    | L(v2) =>
      match v2 {
      | L(v3) =>
        // (A)
        L(v3)
      | R(_) =>
        // (B)
        R(10)
      }
    | R(_) =>
      // (C)
      R(10)
    }
  | R(_) =>
    R(3)
  }
}

define test2(x: joker): int {
  match x {
  | L(v1) =>
    // the `free(x)` inserted here isn't cancelled
    match v1 {
    | L(v2) =>
      match v2 {
      | L(v3) =>
        let _ = L(v3) in
        1
      | R(_) =>
        1
        // !
      }
    | R(_) =>
      let _ = R(10) in
      1
    }
  | R(_) =>
    3
  }
}

define main(): unit {
  let _ = test(L(L(L(L(R(10)))))) in
  let _ = test(L(L(L(R(10))))) in
  let _ = test(L(L(R(10)))) in
  let _ = test(L(R(10))) in
  let _ = test(R(10)) in
  let _ = test2(L(L(L(L(R(10)))))) in
  let _ = test2(L(L(L(R(10))))) in
  let _ = test2(L(L(R(10)))) in
  let _ = test2(L(R(10))) in
  let _ = test2(R(10)) in
  Unit
}
