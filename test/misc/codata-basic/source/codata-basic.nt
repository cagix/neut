data bar(a: tau) {
- Bar(value: a)
}

data foo() {
- Foo(
    value-1: int,
    value-2: i32,
    value-3: bar(int)
  )
}

data stream(a: tau) {
- Stream(
    head: a,
    tail: () -> stream(a)
  )
}

define int-stream(x: int): stream(int) {
  Stream at {
  - head =>
    x
  - tail =>
    () => {
      int-stream(add-int(x, 1))
    }
  }
}

define get-tail[a](s: stream(a)): stream(a) {
  match s {
  - Stream(_, tail-generator) =>
    tail-generator()
  }
}

define get-head[a](s: stream(a)): a {
  match s {
  - Stream(v, _) =>
    v
  }
}

define main(): unit {
  let inner = Bar(10)
  let config =
    Foo at {
    - value-1 => 3
    - value-3 => inner
    - value-2 => 8
    }
  // k = value-1 + value-1 + value-1 + value-3 = 3 + 3 + 3 + 10 = 19
  let k on config = {
    bind Foo(..) = config
    bind Bar(..) = value-3
    add-int(*value-1, add-int(*value-1, add-int(*value-1, *value)))
  }
  let _ = config
  let some-stream = int-stream(3)
  // value = 3 + 1 + 1 = 5
  let value = get-head(get-tail(get-tail(some-stream)))
  print-int(add-int(k, value)) // 24
  print("\n")
}
