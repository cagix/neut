import {
- core
}

data bar(a: tau) {
- Bar(value: a)
}

data foo() {
- Foo(
    value-1: int,
    value-2: int32,
    value-3: bar(int)
  )
}

data stream(a: tau) {
- Stream(
    head: a,
    tail: () -> stream(a)
  )
}

define int-stream(x: int): stream(int) {
  Stream of {
  - head =
    x
  - tail =
    () => {
      int-stream(add-int(x, 1))
    }
  }
}

define get-tail(a: tau, s: stream(a)): stream(a) {
  match s {
  - Stream(_, tail-generator) =>
    tail-generator()
  }
}

define get-head(a: tau, s: stream(a)): a {
  match s {
  - Stream(v, _) =>
    v
  }
}

define main(): unit {
  let inner = Bar(10) in
  let config =
    Foo of {
    - value-1 = 3
    - value-3 = inner
    - value-2 = 8
    }
  in
  // k = value-1 + value-1 + value-1 + value-3 = 3 + 3 + 3 + 10 = 19
  let k on config =
    tie Foo of {value-1, value-3} = config in
    tie Bar of {value} = value-3 in
    add-int(*value-1, add-int(*value-1, add-int(*value-1, *value)))
  in
  let _ = config in
  let some-stream = int-stream(3) in
  // value = 3 + 1 + 1 = 5
  let value = get-head(int, get-tail(int, get-tail(int, some-stream))) in
  print-int(add-int(k, value)); // 24
  print("\n")
}
