struct bar(a: tau) by Bar {
- value: a
}

struct foo() by Foo {
- value-1: int
- value-2: i32
- value-3: bar(int)
}

struct stream(a: tau) by Stream {
- head: a
- tail: () -> stream(a)
}

define int-stream(x: int): stream(int) {
  Stream {
  - head <=
    x
  - tail <=
    lambda () {
      int-stream(add-int(x, 1))
    }
  }
}

define get-tail[a](s: stream(a)): stream(a) {
  match s {
  - Stream(_, tail-generator) =>
    tail-generator()
  }
}

define get-head[a](s: stream(a)): a {
  match s {
  - Stream(v, _) =>
    v
  }
}

define main(): unit {
  let inner = Bar(10)
  let config =
    Foo {
    - value-1 <= 3
    - value-3 <= inner
    - value-2 <= 8
    }
  // k = value-1 + value-1 + value-1 + value-3 = 3 + 3 + 3 + 10 = 19
  let k on config = {
    let s1 = value-1(config)
    let s2 = !config::value-1
    let s3 = config::value-1
    let s4 = config::value-3::value
    add-int(!s1, add-int(s2, add-int(!s3, !s4)))
  }
  let _ = config
  let some-stream = int-stream(3)
  // value = 3 + 1 + 1 = 5
  let value = some-stream::get-tail::get-tail::get-head
  print-int(add-int(k, value)) // 24
  print("\n")
}
