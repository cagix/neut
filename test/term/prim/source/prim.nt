define test-syntax(): unit {
  let _ = int1 in
  let _ = int2 in
  let _ = int4 in
  let _ = int8 in
  let _ = int16 in
  let _ = int32 in
  let _ = int64 in
  let _ = int in

  let _ = float16 in
  let _ = float32 in
  let _ = float64 in
  let _ = float in

  let _: int = 3 in
  let _: float = 3.0 in

  Unit
}

define test-op(): unit {
  let _ = add-int(50, 24) in
  let _ = sub-int(50, 24) in
  let _ = mul-int(50, 24) in
  let _ = div-int(50, 24) in
  let _ = rem-int(50, 24) in
  let _ = udiv-int(50, 8) in
  let _ = urem-int(50, 8) in

  let _ = and-int(50, 24) in
  let _ = or-int(50, 24) in
  let _ = xor-int(50, 24) in
  let _ = shl-int(50, 1) in
  let _ = lshr-int(50, 1) in
  let _ = ashr-int(50, 1) in

  let _ = eq-int(50, 8) in
  let _ = ne-int(50, 8) in
  let _ = lt-int(50, 8) in
  let _ = le-int(50, 8) in
  let _ = gt-int(50, 8) in
  let _ = ge-int(50, 8) in
  let _ = ult-int(50, 8) in
  let _ = ule-int(50, 8) in
  let _ = ugt-int(50, 8) in
  let _ = uge-int(50, 8) in

  let _ = neg-float(1.3) in
  let _ = add-float(1.3, 2.0) in
  let _ = sub-float(1.3, 2.0) in
  let _ = mul-float(1.3, 2.0) in
  let _ = div-float(1.3, 2.0) in
  let _ = rem-float(1.3, 2.0) in
  let _ = eq-float(1.3, 2.0) in
  let _ = ne-float(1.3, 2.0) in
  let _ = gt-float(1.3, 2.0) in
  let _ = ge-float(1.3, 2.0) in
  let _ = lt-float(1.3, 2.0) in
  let _ = le-float(1.3, 2.0) in
  let _ = ueq-float(1.3, 2.0) in
  let _ = une-float(1.3, 2.0) in
  let _ = ugt-float(1.3, 2.0) in
  let _ = uge-float(1.3, 2.0) in
  let _ = ult-float(1.3, 2.0) in
  let _ = ule-float(1.3, 2.0) in
  let _ = ord-float(1.3, 2.0) in
  let _ = uno-float(1.3, 2.0) in
  let _ = true-float(1.3, 2.0) in
  let _ = false-float(1.3, 2.0) in

  let _ = trunc-int64-int32(1234) in
  let _ = zext-int32-int64(1234) in
  let _ = sext-int32-int64(1234) in
  let _ = fptrunc-float64-float32(1.4142) in
  let _ = fpext-float32-float64(1.4142) in
  let _ = fptoui-float-int(3.8) in
  let _ = fptosi-float-int(3.8) in
  let _ = uitofp-int-float(1234) in
  let _ = sitofp-int-float(1234) in

  Unit
}

define opaque(a: tau, x: a): a {
  x
}

define test-string(): unit {
  let _ = opaque(_, "") in
  let _ = opaque(_, "test") in
  let _ = opaque(_, "🌟あ♥️a🌕亜\n\o33\x333") in
  Unit
}

define main(): unit {
  test-syntax();
  test-op();
  test-string()
}
