define nop(): unit {
  Unit
}

define either-bind<e, a, b>(x: either(e, a), k: (a) -> either(e, b)): either(e, b) {
  match x {
  | Left(err) =>
    Left(err)
  | Right(value) =>
    k(value)
  }
}

define test(): either(&text, int) {
  with either-bind {
    bind _: bool = Left("hello") in
    let x = type in
    let _ on x =
      let _ = x in
      type
    in
    let _ = x in
    letbox _ = box {type} in
    bind _: bool = Left("hello") in
    let _ = type in
    bind _: bool = Right(True) in
    nop();
    bind _: bool =
      bind _: bool = Right(True) in
      nop();
      let _ = type in
      Left("hello")
    in
    bind _: bool = Left("hello") in
    bind _: bool = Left("hello") in
    nop();
    bind _: type = Right(int) in
    Right(10)
  }
}

define test2(): either(int, int) {
  with either-bind {
    bind _: bool = Left(3) in
    let _ = type in
    bind _: bool = Left(5) in
    let _ = type in
    bind _: bool = Right(True) in
    nop();
    let tmp = type in
    bind _: bool =
      let k = type in
      pin _ on k =
        let _ = k in
        tmp
      in
      let _ = k in
      bind _: bool = Right(True) in
      nop();
      let _ = type in
      Left(7)
    in
    let _: type = tmp in
    bind _: bool = Left(9) in
    bind _: bool = Left(11) in
    nop();
    bind _: type = Right(int) in
    Right(10)
  }
}

define main(): unit {
  let _ = test() in
  Unit
}
