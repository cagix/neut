import {
  core.null {null},
  core.vector {vector},
}

define test-syntax(): type {
  let _: type = type in
  let _: type = type in
  type
}

define affine-type(): type {
  let _ = type in
  type
}

define linear-type(): type {
  let x = type in
  x
}

define relevant-type(): type {
  let x = type in
  let _ = x in
  x
}

define type-is-type(): type {
  type
}

define pi-is-type(): type {
  let _: type = () -> type in
  let _: type = (type) -> type in
  let _: type = (type, type, type) -> type in
  type
}

define data-is-type(): type {
  let _: type = null in
  let _: type = unit in
  let _: type = bool in
  let _: type = list(type) in
  type
}

define noema-is-type(a: type): type {
  &a
}

define thread-is-type(a: type): type {
  thread(a)
}

define resource-is-type(): type {
  let _: type = text in
  let _: type = vector(text) in
  type
}

define test-semantics(): type {
  let _ = affine-type() in
  let _ = linear-type() in
  let _ = relevant-type() in
  let _ = type-is-type() in
  let _ = pi-is-type() in
  let _ = data-is-type() in
  let _ = noema-is-type(type) in
  let _ = thread-is-type(type) in
  let _ = resource-is-type() in
  type
}

define main(): unit {
  let _ = test-syntax() in
  let _ = test-semantics() in
  Unit
}
