import {
- core.vector {vector}
}

define test-syntax(): tau {
  let _: tau = tau in
  let _: tau = tau in
  tau
}

define affine-tau(): tau {
  let _ = tau in
  tau
}

define linear-tau(): tau {
  let x = tau in
  x
}

define relevant-tau(): tau {
  let x = tau in
  let _ = x in
  x
}

define tau-is-tau(): tau {
  tau
}

define pi-is-tau(): tau {
  let _: tau = () -> tau in
  let _: tau = (tau) -> tau in
  let _: tau = (tau, tau, tau) -> tau in
  tau
}

define data-is-tau(): tau {
  let _: tau = null in
  let _: tau = unit in
  let _: tau = bool in
  let _: tau = list(tau) in
  tau
}

define noema-is-tau(a: tau): tau {
  &a
}

define flow-is-tau(a: tau): tau {
  flow(a)
}

define resource-is-tau(): tau {
  let _: tau = text in
  let _: tau = vector(text) in
  tau
}

define test-semantics(): tau {
  let _ = affine-tau() in
  let _ = linear-tau() in
  let _ = relevant-tau() in
  let _ = tau-is-tau() in
  let _ = pi-is-tau() in
  let _ = data-is-tau() in
  let _ = noema-is-tau(tau) in
  let _ = flow-is-tau(tau) in
  let _ = resource-is-tau() in
  tau
}

define main(): unit {
  let _ = test-syntax() in
  let _ = test-semantics() in
  Unit
}
