import {
  core.control {discard},
  core.int.show {show-int},
}

define axiom-K<a, b>(f: meta (a) -> b, x: meta a): meta b {
  box {
    letbox f' = f in
    letbox x' = x in
    f'(x')
  }
}

define axiom-T<a>(x: meta a): a {
  letbox-T x' = x in
  x'
}

define test-syntax(): unit {
  // box-intro, box-elim
  letbox x = box {Unit} in
  letbox y on x = box x {x} in
  letbox _ on x, y =
    let _ = y in
    box x {x}
  in
  letbox _ on x, y =
    let _ = type in
    box x, y {
      let _ = y in
      x
    }
  in
  let _ = x in
  let _ = y in
  // box-elim-T
  letbox-T x = box {Unit} in
  letbox-T y on x = box x {x} in
  letbox-T _ on x, y =
    let _ = y in
    box x {x}
  in
  letbox-T _ on x =
    let _ = y in
    box x {x}
  in
  // let-on (= letbox-T + quote)
  let len: int on x =
    let _: &unit = x in
    1234
  in
  let _ = len in
  let _ = x in
  Unit
}

define test-resource(xs: list(int)): unit {
  // letbox
  letbox len on xs = quote {length(xs)} in
  printf("{}\n", [show-int(len)]);
  // letbox + box
  letbox len on xs =
    // layer 1
    box xs {
      // layer 0
      let !ys = xs in
      discard(!ys);
      discard(!ys);
      let len on !ys = length(!ys) in
      discard(!ys);
      len
    }
  in
  printf("{}\n", [show-int(len)]);
  // letbox-T
  letbox-T len on xs = quote {length(xs)} in
  printf("{}\n", [show-int(len)]);
  // letbox-T + box
  letbox-T len on xs =
    // layer 0
    box xs {
      // layer -1
      let !ys = xs in
      discard(!ys);
      discard(!ys);
      let len on !ys = length(!ys) in
      discard(!ys);
      len
    }
  in
  discard(xs);
  printf("{}\n", [show-int(len)]);
  Unit
}

define complex(): () -> unit {
  // layer 0
  let xs: list(int) = [1, 2, 3, 4] in
  letbox f on xs =
    // layer 1
    // xs: &list(int) at layer 1
    box xs {
      // layer 0
      // xs: list(int) at layer 0
      function () {
        letbox k on xs =
          // 1
          // xs: &list(int) at layer 1
          let len = length(xs) in
          printf("{}\n", [show-int(len)]);
          box {Unit}
        in
        let _ = k in
        let _ = xs in
        Unit
      }
    }
  in
  discard(xs);
  f
}

define main(): unit {
  test-syntax();
  test-resource([1, 2, 3]);
  complex()()
}

define zen(): unit {
  main()
}
