data empty {}

define test-resource(): unit {
  affine-nat();
  relevant-nat();
  affine-list();
  relevant-list();
  affine-either();
  relevant-either()
}

define affine-nat(): unit {
  let _ = Zero in
  let _ = Succ(Zero) in
  let _ = Succ(Succ(Zero)) in
  Unit
}

define relevant-nat(): unit {
  let zero = Zero in
  let one = Succ(Zero) in
  let two = Succ(Succ(Zero)) in
  let _ = zero in
  let _ = zero in
  let _ = one in
  let _ = one in
  let _ = two in
  let _ = two in
  Unit
}

define affine-list(): unit {
  let _: list(nat) = [] in
  let _ = [Zero] in
  let _ = [Succ(Zero), Zero] in
  Unit
}

define relevant-list(): unit {
  let zero: list(nat) = [] in
  let one = [Zero] in
  let two = [Succ(Zero), Zero] in
  let _ = zero in
  let _ = zero in
  let _ = one in
  let _ = one in
  let _ = two in
  let _ = two in
  Unit
}

define affine-either(): unit {
  let _: either(bool, list(nat)) = Left(True) in
  let _: either(bool, list(nat)) = Right([Zero]) in
  let _: either(bool, list(nat)) = Right([Succ(Zero), Zero]) in
  Unit
}

define relevant-either(): unit {
  let foo: either(bool, list(nat)) = Left(True) in
  let bar: either(bool, list(nat)) = Right([Zero]) in
  let buz: either(bool, list(nat)) = Right([Succ(Zero), Zero]) in
  let _ = foo in
  let _ = foo in
  let _ = bar in
  let _ = bar in
  let _ = buz in
  let _ = buz in
  Unit
}

data term(a) {
- Var(a)
- Abs(a, term(a))
- App(term(a), term(a))
}

define local-completeness(a: tau, t: term(a)): term(a) {
  match t {
  - Var(v) =>
    Var(v)
  - Abs(x, t1) =>
    Abs(x, t1)
  - App(t1, t2) =>
    App(t1, t2)
  }
}

define nested-match(a: tau, t: term(a)): term(a) {
  match t {
  - App(Abs(_, t'), _) =>
    t'
  - t =>
    t
  }
}

data my-enum {
- Foo
- Bar
}

define using-if(): int {
  let _ =
    if True {
      if False {
        Unit
      } else {
        Unit
      }
    } else {
      Unit
    }
  in
  let some-cond = True in
  when some-cond {
    print("hey")
  };
  if False {
    1
  } else-if lt-int(0, 10) {
    2
  } else {
    3
  }
}

define nested-enum-match(t: term(my-enum)): my-enum {
  let val =
    match t {
    - App(Abs(x, t'), Var(e)) =>
      let _ = Var(e) in
      let _ = t' in
      let _ = x in
      let _ = Var(e) in
      let _ = t' in
      let _ = x in
      let _ = Var(e) in
      let _ = t' in
      let _ = x in
      let _ = Var(e) in
      let _ = x in
      let _ = Var(e) in
      let _ = x in
      x
    - App(Abs(x, _), App(Var(_), App(_, App(_, _)))) =>
      let _ = x in
      x
    - App(Abs(x, _), App(App(_, App(_, _)), Var(_))) =>
      x
    - App(App(Abs(_, _), Var(_)), App(App(Abs(y, _), App(_, _)), Var(_))) =>
      y
    - App(App(Abs(x, _), Var(_)), App(App(_, App(_, _)), Var(_))) =>
      x
    - t =>
      let _ = t in
      let _ = t in
      let _ = t in
      Foo
    }
  in
  match val {
  - Foo =>
    let _ = val in
    Bar
  - Bar =>
    Foo
  }
}

define unbalanced-freevars-in-branches(a: tau, t: term(a)): term(a) {
  let foo = Var("test") in
  let f = () => { foo } in
  let g = () => { foo } in
  let h = () => { foo } in
  match t {
  - Var(x) =>
    let _ = f in
    match t {
    - Var(y) =>
      let _ = g in
      let _ = x in
      Var(y)
    - Abs(_, t) =>
      t
    - _ =>
      t
    }
  - Abs(_, t) =>
    match t {
    - App(_, e2) =>
      e2
    - _ =>
      let _ = t in
      let _ = t in
      t
    }
  - App(t1, _) =>
    let _ = g in
    let k = if False { h } else { () => { Var("pohe") } } in
    let _ = k in
    let _ = k in
    let _ = k in
    t1
  }
}

data monoid(a) {
- Monoid of {
  - m-empty: a
  - m-op: (a, a) -> a
  }
}

inline list-monoid(a: tau): monoid(list(a)) {
  Monoid of {
  - m-op =>
    (xs, ys) => { core.list.append(a, xs, ys) }
  - m-empty =>
    []
  }
}

inline use-struct(a: tau, m: monoid(a)): a {
  let Monoid(..) = m in
  m-op(m-empty, m-empty)
}

define test-match(): unit {
  let t1 = Var("text") in
  let t2 = Abs("foo", Var("foo")) in
  let t3 = App(Abs("foo", Var("foo")), Var("buz")) in
  let _ = local-completeness(_, t1) in
  let _ = local-completeness(_, t2) in
  let _ = local-completeness(_, t3) in
  let _ = nested-match(_, t1) in
  let _ = nested-match(_, t2) in
  let _ = nested-match(_, t3) in
  let t1 = Var(Foo) in
  let t2 = Abs(Bar, Var(Bar)) in
  let t3 = App(Abs(Bar, Var(Bar)), Var(Foo)) in
  let t4 = Abs(Bar, App(Var(Bar), Var(Bar))) in
  let _ = nested-enum-match(t1) in
  let _ = nested-enum-match(t2) in
  let _ = nested-enum-match(t3) in
  let _ = nested-enum-match(t4) in
  let _ = unbalanced-freevars-in-branches(_, t1) in
  let _ = unbalanced-freevars-in-branches(_, t2) in
  let _ = unbalanced-freevars-in-branches(_, t3) in
  let _ = unbalanced-freevars-in-branches(_, t4) in
  let _: list(int) = use-struct(_, list-monoid(_)) in
  let _: list(bool) = use-struct(_, list-monoid(_)) in
  let _: list(() -> int) = use-struct(_, list-monoid(_)) in
  Unit
}

define main(): unit {
  test-resource();
  test-match()
}
