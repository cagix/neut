import {
  this.pi-keyword,
  this.pi-term,
}

define test-syntax(): unit {
  // nullary
  let _ = () -> type in
  // general, non-dependent
  let _ = (type) -> type in
  let _ = (() -> type) -> type in
  let _ = (() -> (type) -> type) -> type in
  let _ = (((type) -> type) -> type) -> type in
  // general, dependent
  let _ = (a: type, a) -> a in
  let _ = (a: type, a) -> a in
  let _ = (a: type, a) -> list(type) in
  let _ = (a: type, list(type)) -> a in
  let _ = (a: type, a) -> &list(type) in
  let _ = (a: type, &list(type)) -> a in
  let _ = (a: type, a) -> thread(list(type)) in
  let _ = (a: type, thread(list(type))) -> a in
  let _ = (a: type, a) -> type in
  let _ = (a: type, (a) -> a) -> type in
  let _ = (a: type, ((a) -> a) -> a) -> type in
  // simplified
  let _ = (type) -> type in
  let _ = ({(type) -> type}) -> type in
  let _ = (type) -> (type) -> list(type) in
  let _ = (type) -> {(type) -> type} in
  let _ = (type) -> {(type) -> list(type)} in
  let _ = (type) -> {(list(type)) -> type} in
  let _ = (type) -> {(type) -> &list(type)} in
  let _ = (type) -> {(&list(type)) -> type} in
  let _ = (type) -> {(type) -> thread(list(type))} in
  let _ = (type) -> {(thread(list(type))) -> type} in
  let _ = (type) -> {({(type) -> type}) -> type} in
  let _ = (type) -> {(type) -> {(type) -> type}} in
  let _ = (type) -> {({(type) -> type}) -> {(type) -> type}} in
  let _ = ({(type) -> type}) -> {({(type) -> type}) -> {(type) -> type}} in
  let _ = ({({(type) -> type}) -> {(type) -> type}}) -> {({(type) -> type}) -> {(type) -> type}} in
  // complex
  let _ = (a: type, m: (type, type) -> type) -> ({(s: type) -> (a) -> m(s, a)}) -> a in
  Unit
}

define affine-pi(): type {
  let _ = (type) -> type in
  type
}

define linear-pi(): type {
  let x = (type) -> type in
  x
}

define relevant-pi(): type {
  let x = (type) -> type in
  let _ = x in
  x
}

define test-resource(): unit {
  let _ = affine-pi() in
  let _ = linear-pi() in
  let _ = relevant-pi() in
  Unit
}

define main(): unit {
  test-syntax();
  test-resource();
  this.pi-term.test-syntax();
  this.pi-term.test-resource();
  this.pi-keyword.test-syntax()
}
