define test-syntax(): unit {
  // nullary
  let _ =
    function () {
      type
    }
  in
  // unary
  let _: (type) -> type =
    function (x) {
      x
    }
  in
  let _ =
    function (x: type) {
      x
    }
  in
  // binary
  let _: (type, type) -> type =
    function (x, _) {
      x
    }
  in
  let _: (type, type) -> type =
    function (_, y) {
      y
    }
  in
  let _: (type, type) -> type =
    function (x: type, _) {
      x
    }
  in
  let _: (type, type) -> type =
    function (_, y: type) {
      y
    }
  in
  let _: (type, type) -> type =
    function (x: type, _) {
      x
    }
  in
  let _ =
    function (x: type, y: type) {
      Pair(x, y)
    }
  in
  // exprs in bodies
  let _ =
    function (f: (type) -> type) {
      f(type)
    }
  in
  let _ =
    function (f: (type) -> type) {
      let _ = f(type) in
      type
    }
  in
  let _ =
    function (_: (type) -> type) {
      Unit;
      Unit
    }
  in
  // (unnecessarily) complex type
  let _ =
    function (
      x:
      {
        let _ = type in
        (type, type) -> type
      },
      _: {(type) -> type},
    ) {
      x
    }
  in
  let f =
    function (_: type, _: type, _: type) {
      type
    }
  in
  let _ =
    f(
      {
        let _ = type in
        type
      },
      type,
      let _ = type in
      let f =
        function () {
          type
        }
      in
      f(),
    )
  in
  Unit
}

define sample(): type {
  let _ = type in
  Unit;
  (type, type) -> type
}

define opaque(a: type, x: a) {
  x
}

define affine-lam1(): unit {
  let lam1 =
    opaque(_, function () {
      type
    })
  in
  let _ = lam1 in
  Unit
}

define relevant-lam1(): unit {
  let !lam1 =
    opaque(_, function () {
      type
    })
  in
  let _ = !lam1 in
  let _ = !lam1 in
  Unit
}

define affine-lam2(): unit {
  let lam1 =
    opaque(_, function () {
      type
    })
  in
  let lam2 =
    opaque(_, function () {
      let v = lam1 in
      v
    })
  in
  let _ = lam2 in
  Unit
}

define relevant-lam2(): unit {
  let lam1 =
    opaque(_, function () {
      type
    })
  in
  let !lam2 =
    opaque(_, function () {
      let v = lam1 in
      v
    })
  in
  let _ = !lam2 in
  let _ = !lam2 in
  Unit
}

define affine-lam3(): unit {
  let !lam1 =
    opaque(_, function () {
      type
    })
  in
  let lam2 =
    opaque(_, function () {
      let v = !lam1 in
      v
    })
  in
  let lam3 =
    opaque(_, function (_: (type) -> type) {
      let _ = !lam1 in
      let v2 = lam2 in
      v2
    })
  in
  let _ = lam3 in
  Unit
}

define relevant-lam3(): unit {
  let !lam1 =
    opaque(_, function () {
      type
    })
  in
  let lam2 =
    opaque(_, function () {
      let v = !lam1 in
      v
    })
  in
  let !lam3 =
    opaque(_, function (_: (type) -> type) {
      let _ = !lam1 in
      let v2 = lam2 in
      v2
    })
  in
  let _ = !lam3 in
  let _ = !lam3 in
  Unit
}

define affine-lam4(): unit {
  let !lam1 =
    opaque(_, function () {
      type
    })
  in
  let !lam2 =
    opaque(_, function () {
      let v = !lam1 in
      v
    })
  in
  let !lam3 =
    opaque(_, function (_: (type) -> type) {
      let _ = !lam1 in
      let v2 = !lam2 in
      v2
    })
  in
  let _ = !lam3 in
  let lam4 =
    opaque(_, function (_: (type) -> type) {
      let _ = !lam1 in
      let _ = !lam2 in
      let v3 = !lam3 in
      v3
    })
  in
  let _ = lam4 in
  Unit
}

define relevant-lam4(): unit {
  let !lam1 =
    opaque(_, function () {
      type
    })
  in
  let !lam2 =
    opaque(_, function () {
      let v = !lam1 in
      v
    })
  in
  let !lam3 =
    opaque(_, function (_: (type) -> type) {
      let _ = !lam1 in
      let v2 = !lam2 in
      v2
    })
  in
  let _ = !lam3 in
  let !lam4 =
    opaque(_, function (_: (type) -> type) {
      let _ = !lam1 in
      let _ = !lam2 in
      let v3 = !lam3 in
      v3
    })
  in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  let _ = !lam4 in
  Unit
}

define test-reduction(): unit {
  Unit
}

define test-resource(): unit {
  affine-lam1();
  relevant-lam1();
  affine-lam2();
  relevant-lam2();
  affine-lam3();
  relevant-lam3();
  affine-lam4();
  relevant-lam4()
}

define main(): unit {
  test-syntax();
  test-resource()
}
