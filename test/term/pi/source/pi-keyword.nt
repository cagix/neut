import {
  core.null {null},
}

define foo(
  FOO: bool,
  a: type,
  🌟🌟🌟: type,
  竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね: int,
): type {
  let _ = 竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね in
  if FOO {
    (a) -> 🌟🌟🌟
  } else {
    (🌟🌟🌟) -> type
  }
}

define bar(a: type, some-value: a): unit {
  let _ = some-value in
  Unit
}

define test-syntax(): unit {
  let _ =
    foo of {
      a = int,
      FOO = True,
      🌟🌟🌟 = list(null),
      竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね = {
        let x = 10 in
        let y = 20 in
        add-int(x, y)
      },
    }
  in
  let _ =
    foo of {
      a = int,
      🌟🌟🌟 = list(null),
      FOO = False,
      竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね = {
        let x = 10 in
        let y = 20 in
        add-int(x, y)
      },
    }
  in
  let _ =
    foo of {
      🌟🌟🌟 = list(null),
      a = {
        foo of {
          竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね = {
            let x = 10 in
            let y = 20 in
            add-int(x, y)
          },
          a = int,
          🌟🌟🌟 = list(null),
          FOO = True,
        }
      },
      FOO = False,
      竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね = {
        let x = 10 in
        let y = 20 in
        add-int(x, y)
      },
    }
  in
  let _ =
    // hole-notation + keyword arguments
    bar of {
      a = _,
      some-value = type,
    }
  in
  Unit
}

define def-func-using-of(
  arg-1: int,
  arg-2: type,
): type {
  let _ = arg-1 in
  arg-2
}
