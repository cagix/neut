import {
  core.null {null},
}

define foo(
  FOO: bool,
  a: type,
  🌟🌟🌟: type,
  竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね: int,
): type {
  let _ = 竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね;
  if FOO {
    (a) -> 🌟🌟🌟
  } else {
    (🌟🌟🌟) -> type
  }
}

define bar(a: type, some-value: a): unit {
  let _ = some-value;
  Unit
}

define test-syntax(): unit {
  let _ =
    foo of {
      a := int,
      FOO := True,
      🌟🌟🌟 := list(null),
      竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね := {
        let x = 10;
        let y = 20;
        add-int(x, y)
      },
    }
 ;
  let _ =
    foo of {
      a := int,
      🌟🌟🌟 := list(null),
      FOO := False,
      竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね := {
        let x = 10;
        let y = 20;
        add-int(x, y)
      },
    }
 ;
  let _ =
    foo of {
      🌟🌟🌟 := list(null),
      a := {
        foo of {
          竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね := {
            let x = 10;
            let y = 20;
            add-int(x, y)
          },
          a := int,
          🌟🌟🌟 := list(null),
          FOO := True,
        }
      },
      FOO := False,
      竹の葉に霰ふるなりさらさらに独りは寝べき心地こそせね := {
        let x = 10;
        let y = 20;
        add-int(x, y)
      },
    }
 ;
  let _ =
    // hole-notation + keyword arguments
    bar of {
      a := _,
      some-value := type,
    }
 ;
  Unit
}

define def-func-using-of(
  arg-1: int,
  arg-2: type,
): type {
  let _ = arg-1;
  arg-2
}
