import {
  Ext,
}

define test-syntax(): unit {
  let _ = flow(tau) in
  let _ = (flow(tau)) -> tau in
  let _ = (tau) -> flow(tau) in
  let _ = (flow(tau), flow(tau)) -> (flow(tau)) -> flow(tau) in
  let _ = flow(flow(tau)) in
  let _ = detach {Unit} in
  let _ =
    detach {
      let _ = Unit in
      let _ = Unit in
      Unit
    }
  in
  let _ =
    function () {
      let fl =
        detach {
          let _ = Unit in
          Unit
        }
      in
      Unit;
      attach {fl}
    }
  in
  let _ =
    function (fl: flow(unit)) {
      attach {
        let _ = Unit in
        fl
      }
    }
  in
  Unit
}

define some-list(len: int, acc: list(int)): list(int) {
  if eq-int(len, 0) {
    acc
  } else {
    let val = len in
    some-list(sub-int(len, 1), Cons(val, acc))
  }
}

define detach-send(x: int, ch: &channel(int)): flow(unit) {
  detach {send(ch, x)}
}

define send-all(xs: list(int), ch: &channel(int), acc: list(flow(unit))): list(flow(unit)) {
  match xs {
    Nil => {
      acc
    },
    Cons(y, rest) => {
      let fl = detach-send(y, ch) in
      send-all(rest, ch, Cons(fl, acc))
    },
  }
}

define receive-one-by-one(xs: list(flow(unit)), ch: &channel(int)): unit {
  match xs {
    Nil => {
      Unit
    },
    Cons(fl, rest) => {
      let _ = attach {fl} in
      let _ = receive(ch) in
      receive-one-by-one(rest, ch)
    },
  }
}

define receive-all-at-once(xs: list(flow(unit)), ch: &channel(int)): unit {
  let wait-all =
    define wait-all(ys: list(flow(unit))): _ {
      match ys {
        Nil => {
          Unit
        },
        Cons(z, zs) => {
          let _ = attach {z} in
          wait-all(zs)
        },
      }
    }
  in
  let size on xs = length(xs) in
  wait-all(xs);
  let receive-all =
    define receive-all(count: int): _ {
      if eq-int(count, 0) {
        Unit
      } else {
        let _ = receive(ch) in
        receive-all(sub-int(count, 1))
      }
    }
  in
  receive-all(size)
}

define test-behavior(): unit {
  let ch = new-channel() in
  let _ on ch =
    let fl1 =
      detach {
        let xs = some-list(1000, []) in
        let fs = send-all(xs, ch, []) in
        receive-one-by-one(fs, ch);
        Unit
      }
    in
    let fl2 =
      detach {
        let xs = some-list(1000, []) in
        let fs = send-all(xs, ch, []) in
        receive-all-at-once(fs, ch);
        Unit
      }
    in
    attach {fl1};
    attach {fl2}
  in
  let _ = ch in
  let ch = new-channel() in
  let ch: channel(() -> int) = ch in
  let _ = ch in
  let _ on ch =
    send(ch, function () {
      1
    })
  in
  let ch = ch in
  let ch-clone = ch in
  let _ on ch-clone =
    send(ch-clone, function () {
      1
    })
  in
  let tmp on ch-clone =
    let f =
      detach {
        Ext.sleep(1);
        send(ch-clone, function () {
          3
        })
      }
    in
    let g =
      detach {
        Ext.sleep(1);
        send(ch-clone, function () {
          4
        })
      }
    in
    let _ = receive(ch-clone) in
    let _ = receive(ch-clone) in
    let _ = receive(ch-clone) in
    attach {f};
    attach {g}
  in
  let _ = ch-clone in
  let _ = tmp in
  Unit
}

define main(): unit {
  test-syntax();
  test-behavior();
  Unit
}
