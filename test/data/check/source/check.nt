variant nat() {
- Zero()
- Succ(nat())
}

define nil-cons-cons(xs: nat()): i64 {
  match xs {
  - nat.Zero() =>
    1
  - nat.Succ(nat.Succ(cs)) =>
    2
  - nat.Succ(c) =>
    3
  }
}

define main(): i64 {
  let n0 = nat.Zero()
  let n1 = nat.Succ(n0)
  let n2 = nat.Succ(nat.Succ(nat.Zero()))
  let z0 = nil-cons-cons(n0)
  let z1 = nil-cons-cons(n1)
  let z2 = nil-cons-cons(n2)
  add-i64(z0, add-i64(z1, z2))
}
