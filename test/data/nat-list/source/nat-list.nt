use {
- this.nat-list::nat
- this.nat-list::list
}

enum nat() {
- zero()
- succ(nat())
}

enum list(a: tau) {
- nil()
- cons(a, list(a))
}

define interpret(n: nat()): i64 {
  match n {
  - nat.zero() =>
    0
  - nat.succ(m) =>
    add-i64(1, interpret(m))
  }
}

define nat-list-sum(xs: list(nat())): i64 {
  match xs {
  - this.nat-list::list.nil() =>
    0
  - list.cons(y, ys) =>
    add-i64(interpret(y), nat-list-sum(ys))
  }
}


define main(): i64 {
  nat-list-sum(cons(succ(zero()), cons(succ(zero()), nil())))
}
