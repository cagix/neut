use this.nat-list::nat
use this.nat-list::list

define-data nat() as
- zero()
- succ(nat())
end

define-data list(a: tau) as
- nil()
- cons(a, list(a))
end

define interpret(n: nat()): i64 as
  match n with
  - nat.zero() ->
    0
  - nat.succ(m) ->
    add-i64(1, interpret(m))
  end
end

define nat-list-sum(xs: list(nat())): i64 as
  match xs with
  - this.nat-list::list.nil() ->
    0
  - list.cons(y, ys) ->
    add-i64(interpret(y), nat-list-sum(ys))
  end
end


define main(): i64 as
  nat-list-sum(cons(succ(zero()), cons(succ(zero()), nil())))
end
