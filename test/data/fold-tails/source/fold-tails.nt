use
- this.fold-tails::list
- this.fold-tails::nat
end

define-data nat() with
- zero()
- succ(nat())
end

define-data list(a: tau) with
- nil()
- cons(a, list(a))
end

define add-nat(x: nat(), y: nat()): nat() =
  match x with
  - zero() ->
    y
  - succ(m) ->
    add-nat(m, succ(y))
  end
end

define mul-nat(x: nat(), y: nat()): nat() =
  match x with
  - zero() ->
    zero()
  - succ(m) ->
    add-nat(mul-nat(m, y), y)
  end
end

define interpret(n: nat()): i64 =
  match n with
  - zero() ->
    0
  - succ(m) ->
    add-i64(1, interpret(m))
  end
end

define gen(n: nat()): list(nat()) =
  match n with
  - zero() ->
    nil()
  - succ(m) ->
    cons(n, gen(m))
  end
end

define fold-r<a, b>(f: (b, a) -> a, acc: a, xs: list(b)): a =
  match xs with
  - nil() ->
    acc
  - cons(y, ys) ->
    f(y, fold-r(f, acc, ys))
  end
end

define tails<a>(xs: list(a)): list(list(a)) =
  match xs with
  - nil() ->
    cons(nil(), nil())
  - cons(x, xs) ->
    cons(xs, tails(xs))
  end
end

define map<a, b>(f: (a) -> b, xs: list(a)): list(b) =
  match xs with
  - nil() ->
    nil()
  - cons(y, ys) ->
    cons(f(y), map(f, ys))
  end
end

define head(xs: list(nat())): nat() =
  match xs with
  - nil() ->
    zero()
  - cons(y, ys) ->
    y
  end
end

define main(): i64 =
  let n = succ(succ(succ(zero()))) in
  let n-copy1 = n in
  let n-copy2 = n in
  let n-copy3 = n in
  let m = mul-nat(n, mul-nat(n, n)) in
  let m-copy1 = m in
  let m-copy2 = m in
  let xs = gen(m) in
  let yss = tails(xs) in
  let yss-copy1 = yss in
  let yss-copy2 = yss in
  let zs = map(lambda (l). head(l), yss) in
  let zs-copy1 = zs in
  let zs-copy2 = zs in
  let zs-copy3 = zs in
  let zs-copy4 = zs in
  let zs-copy5 = zs in
  let result-nat = fold-r(lambda (a, b). add-nat(a, b), zero(), zs) in
  let result-nat-copy1 = result-nat in
  let result-nat-copy2 = result-nat in
  let result = interpret(result-nat) in
  result
end
