use
- this.lambda-leak::list
- this.lambda-leak::nat
end

define-data nat() with
- zero()
- succ(nat())
end

define interpret(n: nat()): i64 =
  match n with
  - zero() ->
    0
  - succ(m) ->
    add-i64(1, interpret(m))
  end
end

define add-nat(x: nat(), y: nat()): nat() =
  match x with
  - zero() ->
    y
  - succ(m) ->
    add-nat(m, succ(y))
  end
end

define mul-nat(x: nat(), y: nat()): nat() =
  match x with
  - zero() ->
    zero()
  - succ(m) ->
    add-nat(mul-nat(m, y), y)
  end
end

define-data list(a: tau) with
- nil()
- cons(a, list(a))
end

define fold(a: tau, fs: list((_: a) -> a), x: a): a =
  match fs with
  - nil() ->
    x
  - cons(f, rest) ->
    let yo = rest in
    let hey = rest in
    f(fold(a, rest, x))
  end
end

define main(): i64 =
  let n1 = succ(zero()) in
  let n2 = succ(n1) in
  let n3 = succ(n2) in
  let add2 = lambda (x). add-nat(x, n2) in
  let mul3 = lambda (x). mul-nat(x, n3) in
  let mul9 = lambda (x). mul-nat(x, mul-nat(n3, n3)) in
  let mul9-unused = mul9 in
  let mul9-unused2 = mul9 in

  let unused-add2 = lambda (x). add-i64(x, 2) in
  let unused-mul3 = lambda (x). mul-i64(x, 3) in
  let unused-sub1 = lambda (x). sub-i64(x, 1) in
  let fs = cons(?, add2, cons(?, mul3, cons(?, mul9, nil(?)))) in
  let gs = fs in
  let hs = gs in
  interpret(fold(?, hs, n3))
  // 0
  // fold(hs, 10)
end
