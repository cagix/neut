import {
- core.top
}

enum list(a: tau) {
- nil()
- cons(a, list(a))
}

define-inline get<a>(x: !a): a {
  let value-noema: &a = magic load(pointer(i8), x)
  *value-noema
}

define-inline mutate<a>(x: !a, mutator: a -> a): core.top::top() {
  let value: a = magic load(pointer(i8), x)
  let mutated-value = mutator(value)
  magic store(pointer(i8), x, mutated-value)
}

define length(xs: list(i64)): i64 {
  match xs {
  - list.nil() =>
    0
  - list.cons(y, ys) =>
    add-i64(1, length(ys))
  }
}

define bar(xs: !list(i64)): i64 {
  length(get(xs))
}

define main(): i64 {
  let xs: list(i64) = [1, 2]
  let result on !xs = {
    let len1 = bar(xs)
    mutate(xs, lambda (xs) {
      list.cons(4, xs)
    })
    let len2 = bar(xs)
    mutate(xs, lambda (xs) {
      list.nil()
    })
    mutate(xs, lambda (xs) {
      list.cons(4, xs)
    })
    bar(xs)
  }
  result
}
