import {
- core.top
- core.list => L
- core.vector => V
}

variant list(a: tau) {
- Nil()
- Cons(a, list(a))
}

define-inline get[a](x: cell a): a {
  let value-noema: &a = magic load(pointer(i8), x)
  !value-noema
}

define-inline mutate[a](x: cell a, mutator: a -> a): top {
  let value: a = magic load(pointer(i8), x)
  let mutated-value = mutator(value)
  magic store(pointer(i8), x, mutated-value)
}

define length(xs: list(i64)): i64 {
  match xs {
  - Nil() =>
    0
  - Cons(_, ys) =>
    add-i64(1, length(ys))
  }
}

define bar(xs: cell list(i64)): i64 {
  length(get(xs))
}

define main(): i64 {
  let xs: list(i64) = Cons(1, Cons(2, Nil()))
  let result on mutable xs = {
    let _ = bar(xs)
    mutate(xs, lambda (xs) {
      Cons(4, xs)
    })
    let _ = bar(xs)
    mutate(xs, lambda (_) {
      Nil()
    })
    mutate(xs, lambda (xs) {
      Cons(4, xs)
    })
    bar(xs)
  }
  let _ = xs
  result
}
