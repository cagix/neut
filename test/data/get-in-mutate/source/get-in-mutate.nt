import {
- core.top
- core.list => L
}

variant my-list(a: tau) {
- Nil()
- Cons(my-list(a))
}

define-inline get[a](x: cell a): a {
  let value: &a = magic load(pointer(i8), x)
  !value
}

define-inline mutate[a](x: cell a, mutator: a -> a): core.top.top {
  let value: a = magic load(pointer(i8), x)
  let mutated-value = mutator(value)
  magic store(pointer(i8), x, mutated-value)
}

define main(): i64 {
  let xs: my-list(i64) = Nil()
  let str = "text"
  let val = !str
  let f = lambda () { val }
  let result on f = val
  let _ = result
  let _ = f
  let result on mutable xs = {
    // mutate(xs, lambda (_) { get(xs) })
    mutate(xs, lambda (_) { Nil() })
    1
  }
  let _ = xs
  result
}
