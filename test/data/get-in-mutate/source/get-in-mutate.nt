import {
- core.top
- core.list => L
}

variant list(a: tau) {
- Nil()
- Cons(list(a))
}

define-inline get[a](x: cell a): a {
  let value: &a = magic load(pointer(i8), x)
  !value
}

define-inline mutate[a](x: cell a, mutator: a -> a): core.top.top {
  let value: a = magic load(pointer(i8), x)
  let mutated-value = mutator(value)
  magic store(pointer(i8), x, mutated-value)
}

define main(): i64 {
  let xs: list(i64) = Nil()
  let result on mutable xs = {
    mutate(xs, lambda (_) { get(xs) })
    1
  }
  let _ = xs
  result
}
