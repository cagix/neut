use
- this.codata-basic::foo
end

define-codata foo() with
- value-1: i64
- value-2: i32
- value-3: bar(i64)
end

define-codata bar(a: tau) with
- value: a
end

define-codata stream(a: tau) with
- head: a
- tail: () -> stream(a)
end

define int-stream(x: i64): stream(i64) =
  stream.new(?, x, lambda (). int-stream(add-i64(x, 1)))
end

define tail(a: tau, s: stream(a)): stream(a) =
  match s with
  - stream.new(_, tail-generator) ->
    tail-generator()
  end
end

define head(a: tau ,s: stream(a)): a =
  match s with
  - stream.new(v, _) ->
    v
  end
end

define main(): i64 =
  let inner = bar.new(i64, 10) in
  let config =
    new foo with
    - value-1 <- 3
    - foo.value-3 <- inner
    - value-2 <- 8
    end
  in
  let k on config =
    let s1 = foo.value-1(config) in
    let s2 = *config[value-1] in
    let s3 = config[foo.value-1] in
    let s4 = bar.value(?, config[value-3]) in
    add-i64(*s1, add-i64(s2, add-i64(*s3, *s4)))
  in
  let some-stream = int-stream(3) in
  let value = head(?, tail(?, tail(?, some-stream))) in
  add-i64(k, value)
end
