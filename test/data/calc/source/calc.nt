use {
- this.calc::expr
}

variant expr() {
- Num(i64)
- Add(expr(), expr())
- Sub(expr(), expr())
- Mul(expr(), expr())
}

define interpret(e: expr()): i64 {
  match e {
  - Add(e1, e2) =>
    add-i64(interpret(e1), interpret(e2))
  - Num(x) =>
    x
  - Sub(e1, e2) =>
    sub-i64(interpret(e1), interpret(e2))
  - Mul(e1, e2) =>
    mul-i64(interpret(e1), interpret(e2))
  }
}

define main(): i64 {
  let e1 = Add(Num(1), Num(2))
  let e2 = Mul(Num(3), Num(1023))
  let e3 = Sub(e2, e1)
  interpret(e3)
}
