use {
- this.calc::expr
}

enum expr() {
- num(i64)
- add(expr(), expr())
- sub(expr(), expr())
- mul(expr(), expr())
}

define interpret(e: expr()): i64 {
  match e {
  - add(e1, e2) =>
    add-i64(interpret(e1), interpret(e2))
  - num(x) =>
    x
  - sub(e1, e2) =>
    sub-i64(interpret(e1), interpret(e2))
  - mul(e1, e2) =>
    mul-i64(interpret(e1), interpret(e2))
  }
}

define main(): i64 {
  let e1 = add(num(1), num(2))
  let e2 = mul(num(3), num(1023))
  let e3 = sub(e2, e1)
  interpret(e3)
}
