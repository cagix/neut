import {
- core.bool
- core.list => L
}

variant list() {
- Nil()
- Cons(int, list())
}

// enum my-bool() {
// - true()
// - false()
// }

// define free-vars-in-recursion-lifted(xs: list(), ws: list()): int {
//   if eq-int(0, 0) {
//     let fv-1 = xs
//     1
//   } else {
//     let fv-4 = ws
//     { lambda () { free-vars-in-recursion-lifted(xs, ws) } }()
//   }
// }

define main(): int {
  let xs = Nil()
  let ws = xs
  let multiple-free-var =
    // lambda () { free-vars-in-recursion-lifted(xs, ws) }
    define loop(): int {
      // match magic cast(i1, core.bool::bool(), add-i1(0, 1)) {
      match eq-int(0, 0) {
      - True =>
        let _ = xs
        1
      - core.bool.False =>
        let _ = ws
        loop()
      }
    }
  multiple-free-var()
}
