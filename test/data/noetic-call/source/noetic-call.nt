variant list(a: tau) {
- Nil()
- Cons(a, list(a))
}

define length(xs: &list(i64)): i64 {
  let a = xs
  let b = xs
  let c = xs
  case c {
  - list.Nil() =>
    0
  - list.Cons(y, ys) =>
    add-i64(1, length(ys))
  }
}

define tail(xs: &list(i64)): &list(i64) {
  case xs {
  - list.Nil() =>
    xs
  - list.Cons(y, ys) =>
    ys
  }
}

define main(): i64 {
  let xs = list.Cons(3, list.Cons(1, list.Cons(2, list.Nil())))
  let some-value on xs = length(tail(xs))
  some-value
}
