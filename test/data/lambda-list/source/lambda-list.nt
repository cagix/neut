use {
- this.lambda-list::list
- this.lambda-list::nat
}

variant nat {
- Zero
- Succ(nat)
}

define interpret(n: nat): i64 {
  match n {
  - Zero =>
    0
  - Succ(m) =>
    add-i64(1, interpret(m))
  }
}

define add-nat(x: nat, y: nat): nat {
  match x {
  - Zero =>
    y
  - Succ(m) =>
    add-nat(m, Succ(y))
  }
}

define mul-nat(x: nat, y: nat): nat {
  match x {
  - Zero =>
    Zero
  - Succ(m) =>
    add-nat(mul-nat(m, y), y)
  }
}

variant list(a: tau) {
- Nil()
- Cons(a, list(a))
}

define fold(a: tau, fs: list(a -> a), x: a): a {
  match fs {
  - Nil() =>
    x
  - Cons(f, rest) =>
    let yo = rest
    let hey = rest
    f(fold(a, rest, x))
  }
}

define main(): i64 {
  let n1 = Succ(Zero)
  let n2 = Succ(n1)
  let n3 = Succ(n2)
  let add2 = lambda (x) { add-nat(x, n2) }
  let mul3 = lambda (x) { mul-nat(x, n3) }
  let mul9 = lambda (x) { mul-nat(x, mul-nat(n3, n3)) }
  let mul9-unused = mul9
  // let mul9-unused2 = mul9

  // let add2 = lambda (x). add-i64(x, 2)
  // let mul3 = lambda (x). mul-i64(x, 3)
  // let sub1 = lambda (x). sub-i64(x, 1)
  let fs = Cons(add2, Cons(mul3, Cons(mul9, Nil())))
  let gs = fs
  let hs = gs
  interpret(fold(_, hs, n3))
  // fold(hs, 10)
}
