import
- core.sum
- core.bool
end

use
- core.sum
- core.sum::sum
- this.coproduct::nat
end

define-data nat() with
- zero()
- succ(nat())
end

define interpret(n: nat()): i64 =
  match n with
  - nat.zero() ->
    0
  - nat.succ(m) ->
    add-i64(1, interpret(m))
  end
end

define view(a: tau, b: tau, x: sum(a, b)): i64 =
  match x with
  - left(c) ->
    1
  - right(d) ->
    2
  end
end

define computation-with-error(x: i64): sum(nat(), i64) =
  if eq-i64(x, 0) then
    left(succ(zero()))
  else
    right(interpret(succ(succ(zero()))))
  end
end

define let-sum(x: i64): sum(nat(), i64) =
  let? foo = computation-with-error(x) in
  let? bar = computation-with-error(add-i64(foo, 1)) in
  right(bar)
end

define main(): i64 =
  match let-sum(10) with
  - left(e) ->
    interpret(e)
  - right(v) ->
    let x = view(i64, i32, left(10)) in
    let y = view(i64, i32, right(10)) in
    let z = x in
    let w = x in
    add-i64(v, 1)
  end
end
