import {
- core.bool
}

use {
- this.nat-fact::nat
}

enum nat() {
- zero()
- succ(nat())
}

define add-nat(x: nat(), y: nat()): nat() {
  match x {
  - zero() =>
    y
  - succ(m) =>
    add-nat(m, succ(y))
  }
}

define mul-nat(x: nat(), y: nat()): nat() {
  match x {
  - zero() =>
    zero()
  - succ(m) =>
    add-nat(mul-nat(m, y), y)
  }
}

define eq-nat(n1: nat(), n2: nat()): core.bool::bool() {
  match n1, n2 {
  - zero(), zero() =>
    core.bool::bool.true()
  - succ(m1), succ(m2) =>
    eq-nat(m1, m2)
  - n1, n2 =>
    core.bool::bool.false()
  }
}

define fact(n: nat()): nat() {
  match n {
  - zero() =>
    succ(zero())
  - succ(m) =>
    mul-nat(n, fact(m))
  }
}

define interpret(n: nat()): i64 {
  match n {
  - nat.zero() =>
    0
  - nat.succ(m) =>
    add-i64(1, interpret(m))
  }
}

define main(): i64 {
  let n5 = succ(succ(succ(succ(succ(zero())))))
  interpret(fact(n5))
}
