import {
- core.top
- core.bool
}

use {
- core.top
- core.top::top
}

enum list(a: tau) {
- nil()
- cons(a, list(a))
}

define-inline add-pointer(x: i64, offset: i64): i64 {
  let ptr = magic cast(i64, i64, x)
  magic cast(i64, i64, add-i64(ptr, offset))
}

define copy-i8-array(content-pointer: i64, new-content-pointer: i64, counter: i64, length: i64): top() {
  if eq-i64(counter, length) {
    unit()
  } else {
    let value-pointer = add-pointer(content-pointer, counter)
    let value: i8 = magic load(i8, value-pointer)
    let new-value-pointer = add-pointer(new-content-pointer, counter)
    let _: i64 = magic store(i8, new-value-pointer, value)
    copy-i8-array(content-pointer, new-content-pointer, add-i64(counter, 1), length)
  }
}

resource i8-array {
- lambda(x: i64) {
    let address = magic cast(i64, i64, x)
    let content-pointer: i64 = magic load(pointer(i8), add-i64(address, 8))
    let _: i64 = magic external(free, content-pointer)
    magic external(free, x)
  }
- lambda(x: i64) {
    let length: i64 = magic load(i64, x)
    let content-pointer: i64 = magic load(pointer(i8), add-pointer(x, 8))
    let new-content-pointer: i64 = magic external(malloc, length)
    let _ = copy-i8-array(content-pointer, new-content-pointer, 0, length)
    let result-pointer: i64 = magic external(malloc, 16: i64)
    let _: i64 = magic store(i64, result-pointer, length)
    let _: i64 = magic store(pointer(i8), add-pointer(result-pointer, 8), new-content-pointer)
    result-pointer
  }
}

define main(): i64 {
  let base-pointer: i64 = magic external(malloc, 16: i64)
  let content-pointer: i64 = magic external(malloc, 3: i64)
  let _: i64 = magic store(i8, add-i64(content-pointer, 2), 4: i8)
  let _: i64 = magic store(i64, base-pointer, 3: i64)
  let _: i64 = magic store(pointer(i8), add-i64(base-pointer, 8), content-pointer)
  let my-array = magic cast(i64, i8-array, base-pointer)
  let a = my-array
  let b = my-array
  let c = my-array
  let d = my-array
  let e = my-array
  let f = my-array
  let f-ptr = magic cast(i8-array, i64, f)
  let f-content-pointer = magic load(pointer(i8), add-i64(f-ptr, 8))
  let value: i8 = magic load(i8, add-i64(f-content-pointer, 2))
  let _ = magic cast(i64, i8-array, f-ptr)
  magic cast(i8, i64, value)
}
