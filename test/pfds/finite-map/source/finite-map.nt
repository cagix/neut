import {
- core.bool
- core.option
- core.list
- core.text => T
}

variant order {
- LT
- EQ
- GT
}

variant finite-map(a, b) {
- Leaf
- Node(finite-map(a, b), a, b, finite-map(a, b))
}

struct finite-map-signature(a, b) by Finite-Map {
- empty: finite-map(a, b)
- insert: (a, b, finite-map(a, b)) -> finite-map(a, b)
- lookup: (a, &finite-map(a, b)) -> ?b
}

define make-finite-map[a, b](compare: (a, a) -> order): finite-map-signature(a, b) {
  Finite-Map {
  - empty <=
    Leaf
  - insert <=
    define insert(key: a, value: b, haystack: finite-map(a, b)): finite-map(a, b) {
      match haystack {
      - Leaf =>
        Node(Leaf, key, value, Leaf)
      - Node(left, k, v, right) =>
        match compare(key, k) {
        - LT =>
          Node(insert(key, value, left), k, v, right)
        - EQ =>
          Node(left, k, value, right)
        - GT =>
          Node(left, k, v, insert(key, value, right))
        }
      }
    }
  - lookup <=
    define lookup(key: a, haystack: &finite-map(a, b)): ?b {
      case haystack {
      - Leaf =>
        None
      - Node(left, k, v, right) =>
        match compare(key, !k) {
        - LT =>
          lookup(key, left)
        - EQ =>
          Some(!v)
        - GT =>
          lookup(key, right)
        }
      }
    }
  }
}

define compare-int(x: int, y: int): order {
  if lt-int(x, y) {
    LT
  } else-if gt-int(x, y) {
    GT
  } else {
    EQ
  }
}

define main(): unit {
  let Finite-Map(empty, insert, lookup) = make-finite-map(compare-int)
  let mymap = insert(1, [tau], empty)
  let mymap = insert(2, [tau, tau], mymap)
  let mymap = insert(2, [tau, tau], mymap)
  let mymap = insert(2, [int], mymap)
  let mymap = insert(3, [() -> int], mymap)
  let _ = mymap
  let _ = mymap
  let result on mymap = {
    match lookup(2, mymap) {
    - None =>
      1
    - Some(xs) =>
      match xs {
      - [] =>
        10
      - _ :< _ =>
        20
      }
    }
  }
  let _ = mymap
  print-int(result)
  print("\n")
}
