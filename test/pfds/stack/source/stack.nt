import {
  core.bool {False, True, bool},
  core.either {Right, none},
  core.int.io {print-int-line},
  core.unit {unit},
}

data stack(a) {
| Nil
| Cons(a, stack(a))
}

define empty(a: type): stack(a) {
  Nil
}

define is-empty(a: type, xs: &stack(a)): bool {
  case xs {
  | Nil =>
    True
  | Cons(_, _) =>
    False
  }
}

define head(a: type, xs: &stack(a)): ?&a {
  case xs {
  | Nil =>
    none
  | Cons(a, _) =>
    Right(a)
  }
}

define tail(a: type, xs: &stack(a)): ?&stack(a) {
  case xs {
  | Nil =>
    none
  | Cons(_, rest) =>
    Right(rest)
  }
}

define update(a: type, xs: stack(a), index: int, value: a): stack(a) {
  match xs {
  | Nil =>
    Nil
  | Cons(y, ys) =>
    if eq-int(index, 0) {
      Cons(value, ys)
    } else {
      Cons(y, update(a, ys, sub-int(index, 1), value))
    }
  }
}

define suffixes(a: type, !xs: stack(a)): stack(stack(a)) {
  match !xs {
  | Nil =>
    Nil
  | Cons(_, ys) =>
    Cons(!xs, suffixes(a, ys))
  }
}

define suffixes-noetic(a: type, xs: &stack(a)): stack(&stack(a)) {
  case xs {
  | Nil =>
    Nil
  | Cons(_, ys) =>
    Cons(xs, suffixes-noetic(a, ys))
  }
}

define main(): unit {
  let !xs = empty(int);
  let ys = Cons(10, !xs);
  let zs = Cons(30, Cons(20, ys));
  let !zs = update(_, zs, 1, 20000);
  let _ = suffixes(_, !zs);
  let calc on !zs, !xs = {
    let b = is-empty(_, !zs);
    let _ = is-empty(_, !xs);
    let _ = head(_, !zs);
    let _ = suffixes-noetic(_, !zs);
    let _ = head(_, !xs);
    let _ = tail(_, !zs);
    let _ = tail(_, !zs);
    if b {
      1
    } else {
      2
    }
  };
  let _ = !zs;
  let _ = !xs;
  print-int-line(calc);
}
