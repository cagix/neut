import {
- core.list
- core.text
}

data stack(a) {
- Nil
- Cons(a, stack(a))
}

define empty(a: tau): stack(a) {
  Nil
}

define is-empty(a: tau, xs: &stack(a)): bool {
  case xs {
  - Nil =>
    True
  - Cons(_, _) =>
    False
  }
}

define head(a: tau, xs: &stack(a)): option(&a) {
  case xs {
  - Nil =>
    None
  - Cons(a, _) =>
    Some(a)
  }
}

define tail(a: tau, xs: &stack(a)): option(&stack(a)) {
  case xs {
  - Nil =>
    None
  - Cons(_, rest) =>
    Some(rest)
  }
}

define update(a: tau, xs: stack(a), index: int, value: a): stack(a) {
  match xs {
  - Nil =>
    Nil
  - Cons(y, ys) =>
    if eq-int(index, 0) {
      Cons(value, ys)
    } else {
      Cons(y, update(a, ys, sub-int(index, 1), value))
    }
  }
}

define suffixes(a: tau, xs: stack(a)): stack(stack(a)) {
  match xs {
  - Nil =>
    Nil
  - Cons(_, ys) =>
    Cons(xs, suffixes(a, ys))
  }
}

define suffixes-noetic(a: tau, xs: &stack(a)): stack(&stack(a)) {
  case xs {
  - Nil =>
    Nil
  - Cons(_, ys) =>
    Cons(xs, suffixes-noetic(a, ys))
  }
}

define main(): unit {
  let xs = empty(_) in
  let ys = Cons(10: int, xs) in
  let zs = Cons(30, Cons(20, ys)) in
  let zs = update(_, zs, 1, 20000) in
  let _ = suffixes(_, zs) in
  let calc on zs, xs =
    let b = is-empty(_, zs) in
    let _ = is-empty(_, xs) in
    let _ = head(_, zs) in
    let _ = suffixes-noetic(_, zs) in
    let _ = head(_, xs) in
    let _ = tail(_, zs) in
    let _ = tail(_, zs) in
    if b {
      1
    } else {
      2
    }
  in
  let _ = zs in
  let _ = xs in
  print-int(calc);
  print("\n")
}
