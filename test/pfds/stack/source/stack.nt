import {
- core.bool
- core.option
- core.list => L
}

variant stack(a) {
- Nil
- Cons(a, stack(a))
}

define empty[a](): stack(a) {
  Nil
}

define is-empty[a](xs: &stack(a)): bool {
  case xs {
  - Nil =>
    True
  - Cons(y, rest) =>
    False
  }
}

define head[a](xs: &stack(a)): option(&a) {
  case xs {
  - Nil =>
    None
  - Cons(a, rest) =>
    Some(a)
  }
}

define tail[a](xs: &stack(a)): option(&stack(a)) {
  case xs {
  - Nil =>
    None
  - Cons(a, rest) =>
    Some(rest)
  }
}

define update[a](xs: stack(a), index: i64, value: a): stack(a) {
  match xs {
  - Nil =>
    Nil
  - Cons(y, ys) =>
    if eq-i64(index, 0) {
      Cons(value, ys)
    } else {
      Cons(y, update(ys, sub-i64(index, 1), value))
    }
  }
}

define suffixes[a](xs: stack(a)): stack(stack(a)) {
  match xs {
  - Nil =>
    Nil
  - Cons(y, ys) =>
    Cons(xs, suffixes(ys))
  }
}

define suffixes-noetic[a](xs: &stack(a)): stack(&stack(a)) {
  case xs {
  - Nil =>
    Nil
  - Cons(y, ys) =>
    Cons(xs, suffixes-noetic(ys))
  }
}

define main(): i64 {
  let xs = empty()
  let ys = Cons(10: i64, xs)
  let zs = Cons(30, Cons(20, ys))
  let zs = update(zs, 1, 20000)
  let ws = suffixes(zs)
  let calc on zs, xs = {
    let b = is-empty(zs)
    let b2 = is-empty(xs)
    let h = head(zs)
    let zs-suffixes = suffixes-noetic(zs)
    let h2 = head(xs)
    let t = tail(zs)
    let t2 = tail(zs)
    if b {
      1
    } else {
      2
    }
  }
  calc
}
