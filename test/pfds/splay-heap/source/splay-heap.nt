import {
- core.bool
- core.option
- core.list
}

use {
- this.splay-heap::heap
- core.option
- core.list
}

variant heap(a) {
- Leaf()
- Node(heap(a), a, heap(a))
}

variant order() {
- LT()
- EQ()
- GT()
}

struct product(a, b) {
- left: a
- right: b
}

define insert<a>(cmp: (a, a) -> order(), x: a, t: heap(a)): heap(a) {
  let tuple(smaller, bigger) = split(cmp, x, t)
  Node(smaller, x, bigger)
}

define split<a>(cmp: (a, a) -> order(), pivot: a, t: heap(a)): heap(a) * heap(a) {
  match t {
  - Leaf() =>
    tuple(Leaf(), Leaf())
  - Node(left, v, right) =>
    match cmp(v, pivot) {
    // go right
    - order.LT() =>
      match right {
      - Leaf() =>
        tuple(Node(left, v, Leaf()), Leaf())
      - Node(right-left, w, right-right) =>
        match cmp(w, pivot) {
        // go right
        - order.LT() =>
          let tuple(right-right-small, right-right-big) = split(cmp, pivot, right-right)
          tuple(Node(Node(left, v, right-right-small), w, right-right-small), right-right-big)
        // go left
        - otherwise =>
          let tuple(right-left-small, right-left-big) = split(cmp, pivot, right-left)
          tuple(Node(left, v, right-left-small), Node(right-left-big, w, right-right))
        }
      }
    // go left
    - otherwise =>
      match left {
      - Leaf() =>
        tuple(Leaf(), Node(Leaf(), v, right))
      - Node(left-left, w, left-right) =>
        match cmp(w, pivot) {
        // go right
        - order.LT() =>
          let tuple(left-right-small, left-right-big) = split(cmp, pivot, left-right)
          tuple(Node(left-left, w, left-right-small), Node(left-right-big, v, right))
        // go left
        - otherwise =>
          let tuple(left-left-small, left-left-big) = split(cmp, pivot, left-left)
          tuple(left-left-small, Node(left-left-big, w, Node(left-right, v, right)))
        }
      }
    }
  }
}

define find-min<a>(t: &heap(a)): ?a {
  case t {
  - Leaf() =>
    option.None()
  - Node(Leaf(), x, right) =>
    option.Some(!x)
  - Node(left, x, right) =>
    find-min(left)
  }
}

define delete-min<a>(t: heap(a)): ?heap(a) {
  match t {
  - Leaf() =>
    option.None()
  - Node(Leaf(), x, right) =>
    option.Some(right)
  - Node(Node(Leaf(), x, t12), y, t2) =>
    option.Some(Node(t12, y, t2))
  - Node(Node(t11, x, t12), y, t2) =>
    let? t11 = delete-min(t11)
    option.Some(Node(t11, x, Node(t12, y, t2)))
  }
}

define compare-int-list(xs: list(i64), ys: list(i64)): order() {
  let x on xs = sum(xs)
  let y on ys = sum(ys)
  if lt-i64(x, y) {
    order.LT()
  } else-if gt-i64(x, y) {
    order.GT()
  } else {
    order.EQ()
  }
}

define sum(xs: &list(i64)): i64 {
  case xs {
  - [] =>
    0
  - y :: ys =>
    add-i64(!y, sum(ys))
  }
}

define main(): i64 {
  let h: heap(list(i64)) = Leaf()
  let h = insert(compare-int-list, [1, 2], h)
  let h = insert(compare-int-list, [10], h)
  let h = insert(compare-int-list, [5], h)
  let v1 on h = {
    match find-min(h) {
    - option.Some(xs) =>
      let v on xs = sum(xs)
      v
    - option.None() =>
      4
    }
  }
  let mh = delete-min(h)
  match mh {
  - option.None() =>
    3
  - option.Some(h) =>
    let h = insert(compare-int-list, [4, 8], h)
    let h = insert(compare-int-list, [1, 1], h)
    let v2 on h = {
      match find-min(h) {
      - option.Some(xs) =>
        let v on xs = sum(xs)
        v
      - option.None() =>
        4
      }
    }
    add-i64(v1, v2)
  }
}
