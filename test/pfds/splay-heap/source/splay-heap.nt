data heap(a) {
| Leaf
| Node(heap(a), a, heap(a))
}

define split(a: tau, cmp: (a, a) -> order, pivot: a, t: heap(a)): pair(heap(a), heap(a)) {
  match t {
  | Leaf =>
    Pair(Leaf, Leaf)
  | Node(left, v, right) =>
    match cmp(v, pivot) {
    | LT =>
      // go right
      match right {
      | Leaf =>
        Pair(Node(left, v, Leaf), Leaf)
      | Node(right-left, w, right-right) =>
        match cmp(w, pivot) {
        | LT =>
          // go right
          let Pair(right-right-small, right-right-big) = split(_, cmp, pivot, right-right) in
          Pair(Node(Node(left, v, right-right-small), w, right-right-small), right-right-big)
        | _ =>
          // go left
          let Pair(right-left-small, right-left-big) = split(_, cmp, pivot, right-left) in
          Pair(Node(left, v, right-left-small), Node(right-left-big, w, right-right))
        }
      }
    | _ =>
      // go left
      match left {
      | Leaf =>
        Pair(Leaf, Node(Leaf, v, right))
      | Node(left-left, w, left-right) =>
        match cmp(w, pivot) {
        | LT =>
          // go right
          let Pair(left-right-small, left-right-big) = split(_, cmp, pivot, left-right) in
          Pair(Node(left-left, w, left-right-small), Node(left-right-big, v, right))
        | _ =>
          // go left
          let Pair(left-left-small, left-left-big) = split(_, cmp, pivot, left-left) in
          Pair(left-left-small, Node(left-left-big, w, Node(left-right, v, right)))
        }
      }
    }
  }
}

define insert(a: tau, cmp: (a, a) -> order, x: a, t: heap(a)): heap(a) {
  let Pair(smaller, bigger) = split(_, cmp, x, t) in
  Node(smaller, x, bigger)
}

define find-min(a: tau, t: &heap(a)): ?a {
  case t {
  | Leaf =>
    none()
  | Node(Leaf, x, _) =>
    Right(*x)
  | Node(left, _, _) =>
    find-min(a, left)
  }
}

define delete-min(a: tau, t: heap(a)): ?heap(a) {
  match t {
  | Leaf =>
    none()
  | Node(Leaf, _, right) =>
    Right(right)
  | Node(Node(Leaf, _, t12), y, t2) =>
    Right(Node(t12, y, t2))
  | Node(Node(t11, x, t12), y, t2) =>
    try t11 = delete-min(a, t11) in
    Right(Node(t11, x, Node(t12, y, t2)))
  }
}

define sum(xs: &list(int)): int {
  case xs {
  | [] =>
    0
  | Cons(y, ys) =>
    add-int(*y, sum(ys))
  }
}

define compare-int-list(xs: list(int), ys: list(int)): order {
  let x on xs = sum(xs) in
  let y on ys = sum(ys) in
  let _ = xs in
  let _ = ys in
  if lt-int(x, y) {
    LT
  } else-if gt-int(x, y) {
    GT
  } else {
    EQ
  }
}

define main(): unit {
  let h: heap(list(int)) = Leaf in
  let h = insert(_, compare-int-list, [1, 2], h) in
  let h = insert(_, compare-int-list, [10], h) in
  let h = insert(_, compare-int-list, [5], h) in
  // v1 = 3
  let v1 on h =
    match find-min(_, h) {
    | Right(xs) =>
      let v on xs = sum(xs) in
      // xs = [1, 2]
      let _ = xs in
      v
      // v = 3
    | Left(_) =>
      4
    }
  in
  let mh = delete-min(_, h) in
  let result =
    match mh {
    | Left(_) =>
      3
    | Right(h) =>
      let h = insert(_, compare-int-list, [4, 8], h) in
      let h = insert(_, compare-int-list, [1, 1], h) in
      // v2 = 2
      let v2 on h =
        match find-min(_, h) {
        | Right(xs) =>
          let v on xs = sum(xs) in
          // xs = [1, 1]
          let _ = xs in
          v
          // v = 2
        | Left(_) =>
          4
        }
      in
      let _ = h in
      // v1 + v2 = 3 + 2 = 5
      add-int(v1, v2)
    }
  in
  print-int(result);
  print("\n")
}
