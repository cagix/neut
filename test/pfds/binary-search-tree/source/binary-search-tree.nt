import {
  core.int.io {print-int-line},
  core.int.ord,
}

data set(a) {
| Leaf
| Node(set(a), a, set(a))
}

data set-signature(a) {
| Set(empty: set(a), insert: (a, set(a)) -> set(a), member: (a, &set(a)) -> bool)
}

define make-set-signature(a: type, !compare: (&a, &a) -> ordering): set-signature(a) {
  Set of {
    empty := Leaf,
    insert := {
      define insert(!new-value: a, haystack: set(a)): set(a) {
        match haystack {
        | Leaf =>
          Node(Leaf, !new-value, Leaf)
        | Node(left, !x, right) =>
          let b on !new-value, !x = !compare(!new-value, !x);
          match b {
          | LT =>
            Node(insert(!new-value, left), !x, right)
          | EQ =>
            Node(left, !x, right)
          | GT =>
            Node(left, !x, insert(!new-value, right))
          }
        }
      }
    },
    member := {
      define member(!needle: a, haystack: &set(a)) {
        case haystack {
        | Leaf =>
          False
        | Node(left, x, right) =>
          let b on !needle = !compare(!needle, x);
          match b {
          | LT =>
            member(!needle, left)
          | EQ =>
            True
          | GT =>
            member(!needle, right)
          }
        }
      }
    },
  }
}

define main(): unit {
  let Ord of {compare} = core.int.ord.as-ord;
  let int-set-signature = make-set-signature(int, compare);
  match int-set-signature {
  | Set of {insert := !insert, member, empty} =>
    let my-set = !insert(10, empty);
    let my-set = !insert(20, my-set);
    let my-set = !insert(20, my-set);
    let my-set = !insert(20, my-set);
    let my-set = !insert(30, my-set);
    let result on my-set = member(5, my-set);
    let _ = my-set;
    if result {
      print-int-line(1);
    } else {
      print-int-line(2);
    }
  }
}
