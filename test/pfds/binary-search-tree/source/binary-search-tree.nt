import {
- core.bool
- core.text => T
}

variant order {
- LT
- EQ
- GT
}

variant set(a) {
- Leaf
- Node(set(a), a, set(a))
}

struct set-signature(a) by Set {
- empty: set(a)
- insert: (a, set(a)) -> set(a)
- member: (a, &set(a)) -> bool
}

define make-set-signature[a](compare: (a, a) -> order): set-signature(a) {
  Set {
  - empty <=
    Leaf
  - insert <=
    define insert(new-value: a, haystack: set(a)): set(a) {
      match haystack {
      - Leaf =>
        Node(Leaf, new-value, Leaf)
      - Node(left, x, right) =>
        match compare(new-value, x) {
        - LT =>
          Node(insert(new-value, left), x, right)
        - EQ =>
          Node(left, x, right)
        - GT =>
          Node(left, x, insert(new-value, right))
        }
      }
    }
  - member <=
    define member(needle: a, haystack: &set(a)) {
      case haystack {
      - Leaf =>
        False
      - Node(left, x, right) =>
        match compare(needle, !x) {
        - LT =>
          member(needle, left)
        - EQ =>
          True
        - GT =>
          member(needle, right)
        }
      }
    }
  }
}

define compare-int(x: int, y: int): order {
  if lt-int(x, y) {
    LT
  } else-if gt-int(x, y) {
    GT
  } else {
    EQ
  }
}

define main(): int {
  let int-set-signature = make-set-signature(compare-int)
  let _: int =
    match int-set-signature {
    - Set(empty, insert, member) =>
      let my-set = insert(10, empty)
      let my-set = insert(20, my-set)
      let my-set = insert(20, my-set)
      let my-set = insert(20, my-set)
      let my-set = insert(30, my-set)
      let result on my-set = member(5, my-set)
      let _ = my-set
      if result {
        1
      } else {
        2
      }
    }
  0
}
