import {
- core.bool {False, True, bool}
- core.except {Fail, Pass, none}
- core.pair {Pair, pair}
- core.text
- core.text.io {print, print-int}
- core.unit {unit}
}

data custom-stack(a) {
- Nil
- Cons(pair(a, a), custom-stack(a))
}

define empty(a: tau): custom-stack(a) {
  Nil
}

define is-empty(a: tau, xs: &custom-stack(a)): bool {
  case xs {
  - Nil =>
    True
  - Cons(_, _) =>
    False
  }
}

define head(a: tau, xs: &custom-stack(a)): ?&pair(a, a) {
  case xs {
  - Nil =>
    none()
  - Cons(a, _) =>
    Pass(a)
  }
}

define tail(a: tau, xs: &custom-stack(a)): ?&custom-stack(a) {
  case xs {
  - Nil =>
    none()
  - Cons(_, rest) =>
    Pass(rest)
  }
}

define main(): unit {
  let xs = empty(() -> int) in
  let v =
    Pair(function () {
      1
    }, function () {
      2
    })
  in
  let ys = Cons(v, xs) in
  let zs = Cons(v, Cons(v, ys)) in
  let calc on zs, xs =
    let _ = is-empty(_, zs) in
    let _ = is-empty(_, xs) in
    let h = head(_, zs) in
    let _ = head(_, xs) in
    let _ = tail(_, zs) in
    let _ = tail(_, zs) in
    match h {
    - Fail(_) =>
      1
    - Pass(pair) =>
      tie Pair(_, right) = pair in
      {*right}()
    }
  in
  let _ = zs in
  let _ = xs in
  print-int(calc);
  print("\n")
}
