import {
- core.bool
- core.top
- core.option
}

use {
- core.bool
- core.top
- core.option
}

struct product(a, b) {
- left: a
- right: b
}

variant custom-stack(a) {
- Nil()
- Cons(product(a, a), custom-stack(a))
}

define empty<a>(): custom-stack(a) {
  custom-stack.Nil()
}

define is-empty<a>(xs: &custom-stack(a)): bool() {
  case xs {
  - custom-stack.Nil() =>
    bool.True()
  - custom-stack.Cons(y, rest) =>
    bool.False()
  }
}

define head<a>(xs: &custom-stack(a)): ?&{a * a} {
  case xs {
  - custom-stack.Nil() =>
    core.option::option.None()
  - custom-stack.Cons(a, rest) =>
    core.option::option.Some(a)
  }
}

define tail<a>(xs: &custom-stack(a)): ?&custom-stack(a) {
  case xs {
  - custom-stack.Nil() =>
    option.None()
  - custom-stack.Cons(a, rest) =>
    option.Some(rest)
  }
}

define main(): i64 {
  let xs = empty()
  let v = tuple(lambda () { 1 }, lambda () { 2: i64 })
  let ys = custom-stack.Cons(v, xs)
  let zs = custom-stack.Cons(v, custom-stack.Cons(v, ys))
  let calc on zs, xs = {
    let b = is-empty(zs)
    let b2 = is-empty(xs)
    let h = head(zs)
    let h2 = head(xs)
    let t = tail(zs)
    let t2 = tail(zs)
    match h {
    - option.None() =>
      1
    - option.Some(pair) =>
      bind tuple(left, right) = pair
      {!right}()
    }
  }
  calc
}
