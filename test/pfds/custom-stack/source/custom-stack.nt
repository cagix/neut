import {
  core.int.io {print-int-line},
}

data custom-stack(a) {
| N
| C(pair(a, a), custom-stack(a))
}

define empty(a: type): custom-stack(a) {
  N
}

define is-empty(a: type, xs: &custom-stack(a)): bool {
  case xs {
  | N =>
    True
  | C(_, _) =>
    False
  }
}

define head(a: type, xs: &custom-stack(a)): ?&pair(a, a) {
  case xs {
  | N =>
    none
  | C(a, _) =>
    Right(a)
  }
}

define tail(a: type, xs: &custom-stack(a)): ?&custom-stack(a) {
  case xs {
  | N =>
    none
  | C(_, rest) =>
    Right(rest)
  }
}

define main(): unit {
  let !xs = empty(() -> int);
  let !v =
    Pair(function () {
      1
    }, function () {
      2
    });
  let ys = C(!v, !xs);
  let zs = C(!v, C(!v, ys));
  let calc on zs, !xs = {
    let _ = is-empty(_, zs);
    let _ = is-empty(_, !xs);
    let h = head(_, zs);
    let _ = head(_, !xs);
    let _ = tail(_, zs);
    let _ = tail(_, zs);
    match h {
    | Left(_) =>
      1
    | Right(pair) =>
      tie Pair(_, right) = pair;
      let f = *right;
      f()
    }
  };
  let _ = zs;
  let _ = !xs;
  print-int-line(calc);
}
