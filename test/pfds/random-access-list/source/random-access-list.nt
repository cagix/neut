// random access list via numerical representation
// (complete binary tree + dense representation)

import {
- core.option => opt
- core.list
- core.bool
}

variant tree(a) {
- Leaf(a)
- Node(i64, tree(a), tree(a))
}

variant digit(a) {
- Zero
- One(tree(a))
}

variant R-list(a) {
- New(list(digit(a)))
}

define size[a](t: &tree(a)): i64 {
  case t {
  - Leaf(_) =>
    1
  - Node(w, _, _) =>
    !w
  }
}

define link[a](t1: tree(a), t2: tree(a)): tree(a) {
  let s1 on t1 = size(t1)
  let s2 on t2 = size(t2)
  Node(add-i64(s1, s2), t1, t2)
}

define cons-tree[a](t: tree(a), ts: R-list(a)): R-list(a) {
  match ts {
  - New([]) =>
    New([One(t)])
  - New(Zero :< rest) =>
    New(One(t) :< rest)
  - New(One(t0) :< rest) =>
    let New(ts-new) = cons-tree(link(t, t0), New(rest))
    New(Zero :< ts-new)
  }
}

define cons[a](x: a, ts: R-list(a)): R-list(a) {
  cons-tree(Leaf(x), ts)
}

define uncons-tree[a](ts: R-list(a)): opt.option(tree(a) * R-list(a)) {
  let New(xs) = ts
  match xs {
  - [] =>
    opt.None
  - One(y) :< [] =>
    opt.Some(tuple(y, New([])))
  - One(y) :< rest =>
    opt.Some(tuple(y, New(Zero :< rest)))
  - Zero :< rest =>
    match uncons-tree(New(rest)) {
    - opt.None =>
      opt.None
    - opt.Some(tuple(new-tree, New(new-ts))) =>
      match new-tree {
      - Leaf(_) =>
        opt.None
      - Node(_, t1, t2) =>
        opt.Some(tuple(t1, New(One(t2) :< new-ts)))
      }
    }
  }
}

define lookup-tree[a](i: i64, t: &tree(a)): opt.option(a) {
  case t {
  - Leaf(v) =>
    if eq-i64(i, 0) {
      opt.Some(!v)
    } else {
      opt.None
    }
  - Node(w, t1, t2) =>
    let w-div-2 = div-i64(!w, 2)
    if lt-i64(i, w-div-2) {
      lookup-tree(i, t1)
    } else {
      lookup-tree(sub-i64(i, w-div-2), t2)
    }
  }
}

define lookup-list[a](i: i64, xs: &list(digit(a))): opt.option(a) {
  case xs {
  - [] =>
    opt.None
  - Zero :< rest =>
    lookup-list(i, rest)
  - One(t) :< rest =>
    let s = size(t)
    if lt-i64(i, s) {
      lookup-tree(i, t)
    } else {
      lookup-list(sub-i64(i, s), rest)
    }
  }
}

define lookup[a](i: i64, xs: &R-list(a)): opt.option(a) {
  bind New(xs): &R-list(a) = xs
  lookup-list(i, xs)
}

define update-tree[a](i: i64, x: a, t: tree(a)): tree(a) {
  match t {
  - Leaf(v) =>
    if eq-i64(i, 0) {
      Leaf(x)
    } else {
      Leaf(v)
    }
  - Node(w, t1, t2) =>
    let w-div-2 = div-i64(w, 2)
    if lt-i64(i, w-div-2) {
      Node(w, update-tree(i, x, t1), t2)
    } else {
      Node(w, t1, update-tree(sub-i64(i, w-div-2), x, t2))
    }
  }
}

define update[a](i: i64, x: a, xs: R-list(a)): R-list(a) {
  match xs {
  - New([]) =>
    New([])
  - New(Zero :< ts) =>
    let New(new-xs) = update(i, x, New(ts))
    New(Zero :< new-xs)
  - New(One(t) :< ts) =>
    let s on t = size(t)
    if lt-i64(i, s) {
      New(One(update-tree(i, x, t)) :< ts)
    } else {
      let New(new-xs) = update(sub-i64(i, s), x, New(ts))
      New(One(t) :< new-xs)
    }
  }
}

define find-and-get(i: i64, xs: &R-list(i64)): i64 {
  match lookup(i, xs) {
  - opt.None =>
    0
  - opt.Some(v) =>
    v
  }
}

define main(): i64 {
  let xs = New([]): R-list(i64)
  let xs = cons(3, xs)
  let xs = cons(2, xs)
  let xs = cons(4, xs)
  let xs = cons(1, xs)
  let v1 on xs = find-and-get(0, xs) // 1
  let v2 on xs = find-and-get(1, xs) // 4
  let _ on xs = find-and-get(2, xs) // 2
  let v4 on xs = find-and-get(3, xs) // 3
  let xs = update(2, 10, xs)
  let v3-modified on xs = find-and-get(2, xs) // 10
  let _ = xs
  add-i64(v1, add-i64(v2, add-i64(v3-modified, v4))) // 1 + 4 + 10 + 3 = 18
}
