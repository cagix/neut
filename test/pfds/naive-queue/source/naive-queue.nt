import {
- core.either => S
- core.text => T
- core.list [list, reverse]
}

inline queue(a: tau): tau {
  tuple(list(a), list(a))
}

define empty(a: tau): queue(a) {
  Tuple([], [])
}

define head(a: tau, q: *queue(a)): ?a {
  match* q {
  - Tuple(x :: _, _) =>
    Some(!x)
  - _ =>
    None
  }
}

inline sanitize(a: tau, q: queue(a)): queue(a) {
  match q {
  - Tuple([], ys) =>
    Tuple(reverse(_, ys), [])
  - q =>
    q
  }
}

define tail(a: tau, q: queue(a)): ?queue(a) {
  match q {
  - Tuple(_ :: rest, ys) =>
    Some(sanitize(_, Tuple(rest, ys)))
  - _ =>
    None
  }
}

define snoc(a: tau, v: a, q: queue(a)): queue(a) {
  let Tuple(xs, ys) = q in
  sanitize(_, Tuple(xs, v :: ys))
}

define sum(xs: *list(int)): int {
  match* xs {
  - [] =>
    0
  - v :: rest =>
    add-int(!v, sum(rest))
  }
}

define main(): unit {
  let q: queue(list(int)) = empty(_) in
  let q = snoc(_, [2], q) in
  let q = snoc(_, [5], q) in
  let q = snoc(_, [1], q) in
  // v1 == 2
  let v1 on q =
    match head(_, q) {
    - Some(xs1) =>
      let v1 on xs1 = sum(xs1) in
      let _ = xs1 in
      v1
    - None =>
      4
    }
  in
  let mq = tail(_, q) in
  let result =
    match mq {
    - None =>
      1
    - Some(q) =>
      let q = snoc(_, [3], q) in
      let q = snoc(_, [8], q) in
      // v2 = 5
      let v2 on q =
        match head(_, q) {
        - Some(xs) =>
          let v on xs = sum(xs) in
          let _ = xs in
          v
        - None =>
          4
        }
      in
      let _ = q in
      // 2 + 5 = 7
      add-int(v1, v2)
    }
  in
  print-int(result);
  print("\n")
}
