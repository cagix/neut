data queue(a) {
| Queue(list(a), list(a))
}

define empty(a: type): queue(a) {
  Queue([], [])
}

define head(a: type, q: &queue(a)): ?a {
  case q {
  | Queue(Cons(x, _), _) =>
    Right(*x)
  | _ =>
    none()
  }
}

define sanitize(a: type, q: queue(a)): queue(a) {
  match q {
  | Queue([], ys) =>
    Queue(reverse(ys), [])
  | q =>
    q
  }
}

define tail(a: type, q: queue(a)): ?queue(a) {
  match q {
  | Queue(Cons(_, rest), ys) =>
    Right(sanitize(_, Queue(rest, ys)))
  | _ =>
    none()
  }
}

define snoc(a: type, v: a, q: queue(a)): queue(a) {
  let Queue(xs, ys) = q in
  sanitize(_, Queue(xs, Cons(v, ys)))
}

define sum(xs: &list(int)): int {
  case xs {
  | Nil =>
    0
  | Cons(v, rest) =>
    add-int(*v, sum(rest))
  }
}

define main(): unit {
  let q: queue(list(int)) = empty(_) in
  let q = snoc(_, [2], q) in
  let q = snoc(_, [5], q) in
  let q = snoc(_, [1], q) in
  // v1 == 2
  let v1 on q =
    match head(_, q) {
    | Right(xs1) =>
      let v1 on xs1 = sum(xs1) in
      let _ = xs1 in
      v1
    | Left(_) =>
      4
    }
  in
  let mq = tail(_, q) in
  let result =
    match mq {
    | Left(_) =>
      1
    | Right(q) =>
      let q = snoc(_, [3], q) in
      let q = snoc(_, [8], q) in
      // v2 = 5
      let v2 on q =
        match head(_, q) {
        | Right(xs) =>
          let v on xs = sum(xs) in
          let _ = xs in
          v
        | Left(_) =>
          4
        }
      in
      let _ = q in
      // 2 + 5 = 7
      add-int(v1, v2)
    }
  in
  print-int(result);
  print("\n")
}
