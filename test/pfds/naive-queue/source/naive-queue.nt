data queue(a) {
  Queue(list(a), list(a)),
}

define empty(a: tau): queue(a) {
  Queue([], [])
}

define head(a: tau, q: &queue(a)): ?a {
  case q {
    Queue(Cons(x, _), _) => {
      Pass(*x)
    },
    _ => {
      none()
    },
  }
}

define sanitize(a: tau, q: queue(a)): queue(a) {
  match q {
    Queue([], ys) => {
      Queue(reverse(ys), [])
    },
    q => {
      q
    },
  }
}

define tail(a: tau, q: queue(a)): ?queue(a) {
  match q {
    Queue(Cons(_, rest), ys) => {
      Pass(sanitize(_, Queue(rest, ys)))
    },
    _ => {
      none()
    },
  }
}

define snoc(a: tau, v: a, q: queue(a)): queue(a) {
  let Queue(xs, ys) = q in
  sanitize(_, Queue(xs, Cons(v, ys)))
}

define sum(xs: &list(int)): int {
  case xs {
    Nil => {
      0
    },
    Cons(v, rest) => {
      add-int(*v, sum(rest))
    },
  }
}

define main(): unit {
  let q: queue(list(int)) = empty(_) in
  let q = snoc(_, [2], q) in
  let q = snoc(_, [5], q) in
  let q = snoc(_, [1], q) in
  // v1 == 2
  let v1 on q =
    match head(_, q) {
      Pass(xs1) => {
        let v1 on xs1 = sum(xs1) in
        let _ = xs1 in
        v1
      },
      Fail(_) => {
        4
      },
    }
  in
  let mq = tail(_, q) in
  let result =
    match mq {
      Fail(_) => {
        1
      },
      Pass(q) => {
        let q = snoc(_, [3], q) in
        let q = snoc(_, [8], q) in
        // v2 = 5
        let v2 on q =
          match head(_, q) {
            Pass(xs) => {
              let v on xs = sum(xs) in
              let _ = xs in
              v
            },
            Fail(_) => {
              4
            },
          }
        in
        let _ = q in
        // 2 + 5 = 7
        add-int(v1, v2)
      },
    }
  in
  print-int(result);
  print("\n")
}
