import {
- core.list
- core.bool
- core.option
- core.sum
}

use {
- core.list
- core.bool
- core.option
}

struct product(a, b) {
- left: a
- right: b
}

define-inline queue(a: tau): tau {
  list(a) * list(a)
}

define empty<a>(): queue(a) {
  tuple([], [])
}

define reverse<a>(xs: list(a)): list(a) {
  let f =
    define helper(ys: list(a), acc: list(a)): list(a) {
      match ys {
      - [] =>
        acc
      - z :: zs =>
        helper(zs, z :: acc)
      }
    }
  f(xs, [])
}

define head<a>(q: &queue(a)): ?a {
  case q {
  - product.new(x :: rest, ys) =>
    some(!x)
  - otherwise =>
    none()
  }
}

define-inline sanitize<a>(q: queue(a)): queue(a) {
  match q {
  - product.new([], ys) =>
    tuple(reverse(ys), [])
  - q =>
    q
  }
}

define tail<a>(q: queue(a)): ?queue(a) {
  match q {
  - product.new(x :: rest, ys) =>
    some(sanitize(tuple(rest, ys)))
  - otherwise =>
    none()
  }
}

define snoc<a>(v: a, q: queue(a)): queue(a) {
  match q {
  - product.new(xs, ys) =>
    sanitize(tuple(xs, v :: ys))
  }
}

define sum(xs: &list(i64)): i64 {
  case xs {
  - [] =>
    0
  - v :: rest =>
    add-i64(!v, sum(rest))
  }
}

define main(): i64 {
  let q: queue(list(i64)) = empty()
  let q = snoc([2], q)
  let q = snoc([5], q)
  let q = snoc([1], q)
  let v1 on q = {
    match head(q) {
    - core.sum::sum.right(xs1) =>
      let v1 on xs1 = sum(xs1)
      v1
    - core.sum::sum.left(v) =>
      4
    }
  }
  let mq = tail(q)
  match mq {
  - core.sum::sum.left(_) =>
    1
  - core.sum::sum.right(q) =>
    let q = snoc([3], q)
    let q = snoc([8], q)
    let v2 on q = {
      match head(q) {
      - core.sum::sum.right(xs) =>
        let v on xs = sum(xs)
        v
      - core.sum::sum.left(v) =>
        4
      }
    }
    add-i64(v1, v2)
  }
}
