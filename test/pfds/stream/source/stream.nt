import {
- core.bool
}

variant stream-cell(a) {
- Nil()
- Cons(a, stream(a))
}

define-inline stream(a: tau): tau {
  'stream-cell(a)
}

define append<a>(xs: stream(a), ys: stream(a)): stream(a) {
  match xs() {
  - stream-cell.Nil() =>
    ys
  - stream-cell.Cons(x1, rest) =>
    lambda () {
      stream-cell.Cons(x1, append(rest, ys))
    }
  }
}

define take<a>(n: i64, xs: stream(a)): stream(a) {
  if eq-i64(n, 0) {
    lambda () { stream-cell.Nil() }
  } else {
    match xs() {
    - stream-cell.Nil() =>
      lambda () { stream-cell.Nil() }
    - stream-cell.Cons(x, rest) =>
      lambda () {
        stream-cell.Cons(x, take(sub-i64(n, 1), rest))
      }
    }
  }
}

define main(): i64 {
  let my-stream: stream(i64) =
    lambda () { stream-cell.Cons(1, lambda () { stream-cell.Nil() }) }
  0
}
