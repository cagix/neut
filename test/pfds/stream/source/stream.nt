import {
- core.bool
- core.unit {unit, Unit}
}

mutual {
  data stream-cell(a) {
  - Nil
  - Cons(a, stream(a))
  }

  data stream(a) {
  - Stream(() -> stream-cell(a))
  }
}

define append(a: tau, xs: stream(a), ys: stream(a)): stream(a) {
  let Stream(k) = xs in
  match k() {
  - Nil =>
    ys
  - Cons(x1, rest) =>
    Stream(
      () => {
        Cons(x1, append(a, rest, ys))
      }
   )
  }
}

define take(a: tau, n: int, xs: stream(a)): stream(a) {
  if eq-int(n, 0) {
    Stream(() => {Nil})
  } else {
    let Stream(k) = xs in
    match k() {
    - Nil =>
      Stream(() => {Nil})
    - Cons(x, rest) =>
      Stream(() => {
        Cons(x, take(a, sub-int(n, 1), rest))
      })
    }
  }
}

define main(): unit {
  let my-stream: stream(int) =
    Stream(() => {Cons(1, Stream(() => {Nil}))})
  in
  let _ = my-stream in
  Unit
}
