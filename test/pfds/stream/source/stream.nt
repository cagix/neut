import {
- core.bool
- core.list => L
- core.text => T
}

variant stream-cell(a) {
- Nil
- Cons(a, stream(a))
}

define-inline stream(a: tau): tau {
  arrow () -> stream-cell(a)
}

define append[a](xs: stream(a), ys: stream(a)): stream(a) {
  match xs() {
  - Nil =>
    ys
  - Cons(x1, rest) =>
    lambda () {
      Cons(x1, append(rest, ys))
    }
  }
}

define take[a](n: int, xs: stream(a)): stream(a) {
  if eq-int(n, 0) {
    lambda () { Nil }
  } else {
    match xs() {
    - Nil =>
      lambda () { Nil }
    - Cons(x, rest) =>
      lambda () {
        Cons(x, take(sub-int(n, 1), rest))
      }
    }
  }
}

define main(): unit {
  let my-stream: stream(int) =
    lambda () { Cons(1, lambda () { Nil }) }
  let _ = my-stream
  Unit
}
