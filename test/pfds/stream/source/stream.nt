import {
  core.bool,
  core.unit {Unit, unit},
}

nominal {
  stream(a: type): type,
}

data stream-cell(a) {
| Nil
| Cons(a, stream(a))
}

data stream(a) {
| Stream(() -> stream-cell(a))
}

define append(a: type, xs: stream(a), ys: stream(a)): stream(a) {
  let Stream(k) = xs in
  match k() {
  | Nil =>
    ys
  | Cons(x1, rest) =>
    Stream(function () {
      Cons(x1, append(a, rest, ys))
    })
  }
}

define take(a: type, n: int, xs: stream(a)): stream(a) {
  if eq-int(n, 0) {
    Stream(function () {
      Nil
    })
  } else {
    let Stream(k) = xs in
    match k() {
    | Nil =>
      Stream(function () {
        Nil
      })
    | Cons(x, rest) =>
      Stream(function () {
        Cons(x, take(a, sub-int(n, 1), rest))
      })
    }
  }
}

define main(): unit {
  let my-stream: stream(int) =
    Stream(function () {
      Cons(1, Stream(function () {
        Nil
      }))
    })
  in
  let _ = my-stream in
  Unit
}
