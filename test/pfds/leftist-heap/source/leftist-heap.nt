import {
- core.text => T
}

variant order {
- LT
- EQ
- GT
}

// leftist heap
variant heap(a) {
- Leaf
- Node(int, a, heap(a), heap(a)) // int stands for the rank of the Node
}

struct heap-signature(a) by Heap {
- empty: heap(a)
- is-empty: &heap(a) -> bool
- insert: (a, heap(a)) -> heap(a)
- merge: (heap(a), heap(a)) -> heap(a)
- find-min: &heap(a) -> ?a
- delete-min: heap(a) -> ?heap(a)
}

define make-heap-signature[a](compare: (a, a) -> order): heap-signature(a) {
  let merge = {
    let rank =
      (h: &heap(a)) => {
        case h {
        - Leaf =>
          0
        - Node(r, _, _, _) =>
          *r
        }
      }
    let make-Node =
      (x: a, l: heap(a), r: heap(a)) => {
        let rank1 on l = rank(l)
        let rank2 on r = rank(r)
        if ge-int(rank1, rank2) {
          Node(add-int(rank2, 1), x, l, r)
        } else {
          Node(add-int(rank1, 1), x, r, l)
        }
      }
    mu merge(h1: heap(a), h2: heap(a)): heap(a) {
      match h1, h2 {
      - h1, Leaf =>
        h1
      - Leaf, h2 =>
        h2
      - Node(rank1, value1, left1, right1), Node(rank2, value2, left2, right2) =>
        match compare(value1, value2) {
        - LT =>
          make-Node(value1, left1, merge(right1, Node(rank2, value2, left2, right2)))
        - _ =>
          make-Node(value2, left2, merge(Node(rank1, value1, left1, right1), right2))
        }
      }
    }
  }
  Heap at {
  - empty =>
    Leaf
  - is-empty =>
    (h: &heap(a)) => {
      case h {
      - Leaf =>
        True
      - Node(_, _, _, _) =>
        False
      }
    }
  - insert =>
    (x: a, h: heap(a)) => {
      merge(Node(1, x, Leaf, Leaf), h)
    }
  - merge =>
    merge
  - find-min =>
    (h: &heap(a)) => {
      case h {
      - Leaf =>
        None
      - Node(_, value, _, _) =>
        Some(*value)
      }
    }
  - delete-min =>
    (h: heap(a)) => {
      match h {
      - Leaf =>
        None
      - Node(_, _, left, right) =>
        Some(merge(left, right))
      }
    }
  }
}

define compare-int(x: int, y: int): order {
  if lt-int(x, y) {
    LT
  } else-if gt-int(x, y) {
    GT
  } else {
    EQ
  }
}

define main(): unit {
  let int-heap-signature = make-heap-signature(compare-int)
  let Heap(empty, _, insert, _, find-min, delete-min) = int-heap-signature
  let h = empty
  let h = insert(10, h)
  let h = insert(2, h)
  let h = insert(5, h)
  let h = insert(8, h)
  let h = insert(1, h)
  let h = insert(3, h)
  let mh = delete-min(h)
  match mh {
  - None =>
    print-int(100)
  - Some(h) =>
    let h = insert(9, h)
    let min on h =
      match find-min(h) {
      - None =>
        print-int(100)
      - Some(value) =>
        print-int(value)
      }
    let _ = h
    let _ = min
    Unit
  }
  print("\n")
}
