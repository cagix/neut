import {
- core.text
}

data order {
- LT
- EQ
- GT
}

// leftist heap
data heap(a) {
- Leaf
- Node(int, a, heap(a), heap(a)) // int stands for the rank of the Node
}

data heap-signature(a) {
- Heap of {
  - empty: heap(a)
  - is-empty: &heap(a) -> bool
  - insert: (a, heap(a)) -> heap(a)
  - merge: (heap(a), heap(a)) -> heap(a)
  - find-min: &heap(a) -> ?a
  - delete-min: heap(a) -> ?heap(a)
  }
}

define make-heap-signature(a: tau, compare: (a, a) -> order): heap-signature(a) {
  let merge =
    let rank =
      (h: &heap(a)) => {
        &match h {
        - Leaf =>
          0
        - Node(r, _, _, _) =>
          !r
        }
      }
    in
    let make-Node =
      (x: a, l: heap(a), r: heap(a)) => {
        let rank1 on l = rank(l) in
        let rank2 on r = rank(r) in
        if ge-int(rank1, rank2) {
          Node(add-int(rank2, 1), x, l, r)
        } else {
          Node(add-int(rank1, 1), x, r, l)
        }
      }
    in
    mu merge(h1: heap(a), h2: heap(a)): heap(a) {
      match h1, h2 {
      - h1, Leaf =>
        h1
      - Leaf, h2 =>
        h2
      - Node(rank1, value1, left1, right1), Node(rank2, value2, left2, right2) =>
        match compare(value1, value2) {
        - LT =>
          make-Node(value1, left1, merge(right1, Node(rank2, value2, left2, right2)))
        - _ =>
          make-Node(value2, left2, merge(Node(rank1, value1, left1, right1), right2))
        }
      }
    }
  in
  Heap of {
  - empty =>
    Leaf
  - is-empty =>
    (h: &heap(a)) => {
      &match h {
      - Leaf =>
        True
      - Node(_, _, _, _) =>
        False
      }
    }
  - insert =>
    (x: a, h: heap(a)) => {
      merge(Node(1, x, Leaf, Leaf), h)
    }
  - merge =>
    merge
  - find-min =>
    (h: &heap(a)) => {
      &match h {
      - Leaf =>
        None
      - Node(_, value, _, _) =>
        Some(!value)
      }
    }
  - delete-min =>
    (h: heap(a)) => {
      match h {
      - Leaf =>
        None
      - Node(_, _, left, right) =>
        Some(merge(left, right))
      }
    }
  }
}

define compare-int(x: int, y: int): order {
  if lt-int(x, y) {
    LT
  } else-if gt-int(x, y) {
    GT
  } else {
    EQ
  }
}

define main(): unit {
  let int-heap-signature = make-heap-signature(_, compare-int) in
  let Heap(..) = int-heap-signature in
  let h = empty in
  let h = insert(10, h) in
  let h = insert(2, h) in
  let h = insert(5, h) in
  let h = insert(8, h) in
  let h = insert(1, h) in
  let h = insert(3, h) in
  let mh = delete-min(h) in
  match mh {
  - None =>
    print-int(100)
  - Some(h) =>
    let h = insert(9, h) in
    let min on h =
      match find-min(h) {
      - None =>
        print-int(100)
      - Some(value) =>
        print-int(value)
      }
    in
    let _ = h in
    let _ = min in
    Unit
  };
  print("\n")
}
